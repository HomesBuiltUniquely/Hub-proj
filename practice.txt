'use client';

import { useEffect, useRef, useState } from "react";
import {Pincode} from "./Pincode"
import Section1 from "../Components/LandingPage1/Section";

const carouselImages = [
  "/3.png",
  "/1.png",
  "/2.png",
  "/3.png",
  "/4.png",
];

export default function LandingPage() {
  const [cityOpen, setCityOpen] = useState(false);
  const [budgetOpen, setBudgetOpen] = useState(false);
  const [selectedCity, setSelectedCity] = useState("");
  const [selectedBudget, setSelectedBudget] = useState("");
  const [selectedPincode, setSelectedPincode] = useState("");
  const [whatsappConsent, setWhatsappConsent] = useState(true);
  const [carouselIndex, setCarouselIndex] = useState(0);
  // Auto-slide effect
  useEffect(() => {
    const interval = setInterval(() => {
      setCarouselIndex((prev) => (prev === carouselImages.length - 1 ? 0 : prev + 1));
    }, 3000); // 3 seconds
    return () => clearInterval(interval);
  }, []);

  const cityRef = useRef<HTMLDivElement>(null);
  const budgetRef = useRef<HTMLDivElement>(null);

  const cityOptions = [
    "2BHK Essential Interiors [ Starting at 2.8 Lakhs (Including Modular kitchen, wardrobes, TV unit, Crockery units) ]",
    "3 BHK Essential Interiors [ Starting at 3.8 Lakhs (Including Modular kitchen, wardrobes, TV unit, Crockery units) ]",
    "4BHK Essential Interiors [ Starting at 5.5 Lakhs (Including Modular kitchen, wardrobes, TV unit, Crockery units) ]",
    "2 BHK End-to-End Interiors [3 - 5 Lakhs]",
    "3 BHK End-to-End Interiors [5 - 7 Lakhs]",
    "4 BHK End-to-End Interiors [7 - 9 Lakhs]",
  ];

  const budgetOptions = [
    "Immediately",
    "0-3 Months",
    "3-6 Months",
  ];

  const handleCitySelect = (value: string) => {
    setSelectedCity(value);
    setCityOpen(false);
  };

  const handleBudgetSelect = (value: string) => {
    setSelectedBudget(value);
    setBudgetOpen(false);
  };

  const handlePrev = () => setCarouselIndex((prev) => (prev === 0 ? carouselImages.length - 1 : prev - 1));
  const handleNext = () => setCarouselIndex((prev) => (prev === carouselImages.length - 1 ? 0 : prev + 1));

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (cityRef.current && !cityRef.current.contains(event.target as Node)) {
        setCityOpen(false);
      }
      if (budgetRef.current && !budgetRef.current.contains(event.target as Node)) {
        setBudgetOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedCity || !selectedBudget || !selectedPincode || !whatsappConsent) {
      alert("Please fill out all required fields.");
      return;
    }
    alert("Form submitted successfully!");
  };

  return (
    <div>
    <form onSubmit={handleSubmit}>
      {/* Mobile/Tablet Hero Section Redesigned */}
      <div className="block lg:hidden relative w-full h-[370px] sm:h-[420px] mb-0">
        {/* Background image */}
        <img src="1.png" alt="Hero" className="absolute inset-0 w-full h-full object-cover rounded-b-3xl" />
        {/* Overlay */}
        <div className="absolute inset-0 bg-black bg-opacity-60 rounded-b-3xl"></div>
        {/* Logo and Button Row */}
        <div className="absolute top-4 left-4 right-4 flex items-center justify-between z-10">
          <img src="/hub.png" alt="Logo" className="h-[38px]" />
          <button type="button" className="bg-[#DDCDC1] text-amber-950 rounded-full px-5 py-2 text-sm font-semibold shadow-md">GET FREE QUOTE</button>
        </div>
        <img src="1.png" alt="Hero" className="absolute inset-0 w-full h-full object-cover rounded-b-3xl" />

        {/* Centered Heading and Subheading */}
        <div className="absolute inset-0 flex flex-col items-center justify-center text-center px-4 z-10">
          <h1 className="text-white text-4xl font-bold leading-tight mb-2 drop-shadow-lg">Best Interior<br/>Designers</h1>
          <p className="text-white text-base font-medium drop-shadow mb-2">Transforming Bangalore homes with personalized<br/>interiors that reflect your lifestyle.</p>
        </div>
      </div>
      {/* Overlapping Form Card */}
      <div className="block lg:hidden relative z-20 -mt-10 px-2">
        <div className="bg-white w-full rounded-t-3xl shadow-2xl pt-8 pb-4 px-3">
          <div className="text-2xl font-semibold text-center mb-6 text-amber-950">Interiors For Every Budget</div>
          {/* Place the rest of the form here (inputs, dropdowns, checkbox, button, etc.) */}
          <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center">
            <input 
              type="text" 
              name="name" 
              placeholder="Name" 
              required 
              className="w-full sm:w-[250px] h-[50px] bg-[#f1f2f6] mt-4 sm:mt-12 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
            />
            <input 
              type="email" 
              name="email" 
              placeholder="Email" 
              required 
              className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-4 sm:mt-12 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
            />
          </div>
          <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center">
            <input 
              type="tel" 
              name="phone" 
              placeholder="Phone Number" 
              required 
              className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-6 sm:mt-10 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
            />
            {/* Unified Pincode Dropdown - styled like other dropdowns, mobile and desktop */}
            <div className="relative w-full sm:w-[250px] mt-4 sm:mt-10">
              <select
                name="pincode"
                required
                value={selectedPincode}
                onChange={e => setSelectedPincode(e.target.value)}
                className="w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] pl-6 sm:pl-8 pr-10 lg:pr-16 text-gray-400 appearance-none cursor-pointer"
              >
                <option className="text-gray-400" value="" disabled>Property Pincode</option>
                {Pincode.map((pin, idx) => (
                  <option key={idx} value={pin}>{pin}</option>
                ))}
              </select>
              {/* Custom dropdown arrow icon */}
              <span className="text-gray-500 mt-3 -ml-6 text-[18px] absolute">&#9662;</span>
            </div>
          </div>
          {/* Restore City and Budget Dropdowns */}
          <div className="relative w-full sm:w-[520px] mx-auto mt-6 sm:mt-10 space-y-4 sm:space-y-6">
            {/* City Dropdown */}
            <div ref={cityRef}>
              <div
                onClick={() => {
                  setCityOpen(!cityOpen);
                  setBudgetOpen(false);
                }}
                className={`w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] flex items-center justify-between px-4 sm:px-6 cursor-pointer ${!selectedCity && 'text-gray-400'}`}
              >
                <span className="truncate">
                  {selectedCity || "Choose Interior Setup"}
                </span>
                <span className="text-gray-500">&#9662;</span>
              </div>
              {cityOpen && (
                <ul className="absolute top-[60px] left-0 w-full bg-white border border-gray-300 rounded-xl lg:rounded-2xl shadow-lg z-10 text-left max-h-60 overflow-y-auto font-medium">
                  {cityOptions.map((option) => (
                    <li
                      key={option}
                      onClick={() => handleCitySelect(option)}
                      className="px-4 sm:px-6 py-2 hover:bg-gray-100 cursor-pointer text-gray-700 text-xs sm:text-sm"
                    >
                      {option}
                    </li>
                  ))}
                </ul>
              )}
            </div>
            {/* Budget Dropdown */}
            <div ref={budgetRef}>
              <div
                onClick={() => {
                  setBudgetOpen(!budgetOpen);
                  setCityOpen(false);
                }}
                className={`w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] mt-6 sm:mt-10 flex items-center justify-between px-4 sm:px-6 cursor-pointer ${!selectedBudget && 'text-gray-400'}`}
              >
                <span>
                  {selectedBudget || "Possession In"}
                </span>
                <span className="text-gray-500">&#9662;</span>
              </div>
              {budgetOpen && (
                <ul className="absolute top-[110px] sm:top-[130px] left-0 w-full bg-white border border-gray-300 rounded-xl lg:rounded-2xl shadow-lg z-10 text-left max-h-60 overflow-y-auto font-medium">
                  {budgetOptions.map((option) => (
                    <li
                      key={option}
                      onClick={() => handleBudgetSelect(option)}
                      className="px-4 sm:px-6 py-2 hover:bg-gray-100 cursor-pointer text-gray-700 text-xs sm:text-sm"
                    >
                      {option}
                    </li>
                  ))}
                </ul>
              )}
            </div>
          </div>
          {/* Checkbox and Button Container */}
          <div className="flex flex-col items-start mt-6 sm:mt-8 gap-3">
            {/* WhatsApp Checkbox */}
            <div className="flex items-center w-full sm:w-auto justify-start mb-3 lg:mb-0 lg:ml-2">
              <input
                type="checkbox"
                required
                checked={whatsappConsent}
                onChange={() => setWhatsappConsent(!whatsappConsent)}
                className="size-4 sm:size-5 accent-[#DDCDC1] flex-shrink-0"
              />
              <label className="text-sm sm:text-[16px] font-light ml-2 sm:ml-6 whitespace-normal break-words">
                Send Me Updates On WhatsApp
              </label>
            </div>
            {/* Next Button */}
            <button
              type="submit"
              className="flex w-[180px] sm:w-[200px] h-[45px] sm:h-[50px] bg-[#DDCDC1] rounded-3xl lg:rounded-4xl text-xl sm:text-2xl lg:text-[24px] font-medium justify-center items-center lg:mt-2"
            >
              <p>Next</p>
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="size-5 sm:size-6 lg:size-7 ml-2">
                <path strokeLinecap="round" strokeLinejoin="round" d="m12.75 15 3-3m0 0-3-3m3 3h-7.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
              </svg>
            </button>
          </div>
          {/* Legal Text */}
          <div className="text-xs sm:text-sm lg:text-[14px] mt-4 sm:mt-6 font-medium text-center sm:text-left mr-0 sm:mr-26 lg:ml-2">
            By Submitting This Form, You Agree To The{" "}
            <span className="text-[#DDCDC1]">Privacy Policy</span> &{" "}
            <span className="text-[#DDCDC1]">Terms & Conditions</span>
          </div>
        </div>
      </div>
      {/* Desktop/Tablet Layout */}
      <div className="hidden lg:block bg-[#f1f2f6] min-h-screen p-4 sm:p-6">
        <div className="flex flex-col lg:flex-row gap-6 max-w-7xl mx-auto lg:mr-30">
          {/* Left side - Form */}
          <div className="w-full lg:w-auto">
            <div className="flex justify-center lg:justify-start">
              <img src="/hub.png" alt="Logo" className="h-[40px] sm:h-[50px] lg:h-[60px] mt-2" />
            </div>
            <div className="bg-white w-full lg:min-w-[570px] h-auto lg:h-[670px] mt-6 lg:mt-12 rounded-3xl lg:rounded-4xl text-2xl sm:text-3xl lg:text-4xl font-semibold text-center p-6 sm:p-8 lg:p-10 shadow-2xl">
              <p className="lg:mr-20 mb-6 lg:mb-0">Interiors For Every Budget</p>
              <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center">
                <input 
                  type="text" 
                  name="name" 
                  placeholder="Name" 
                  required 
                  className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-4 sm:mt-12 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
                />
                <input 
                  type="email" 
                  name="email" 
                  placeholder="Email" 
                  required 
                  className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-4 sm:mt-12 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
                />
              </div>
              <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center">
                <input 
                  type="tel" 
                  name="phone" 
                  placeholder="Phone Number" 
                  required 
                  className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-6 sm:mt-10 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
                />
                {/* Unified Pincode Dropdown - styled like other dropdowns, mobile and desktop */}
                <div className="relative w-full sm:w-[250px] mt-4 sm:mt-10">
                  <select
                    name="pincode"
                    required
                    value={selectedPincode}
                    onChange={e => setSelectedPincode(e.target.value)}
                    className="w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] pl-6 sm:pl-8 pr-10 lg:pr-16 text-gray-400 appearance-none cursor-pointer"
                  >
                    <option className="text-gray-400" value="" disabled>Property Pincode</option>
                    {Pincode.map((pin, idx) => (
                      <option key={idx} value={pin}>{pin}</option>
                    ))}
                  </select>
                  {/* Custom dropdown arrow icon */}
                  <span className="text-gray-500 absolute mt-4 -ml-8 text-[16px]">&#9662;</span>
                </div>
              </div>
              {/* Restore City and Budget Dropdowns */}
              <div className="relative w-full sm:w-[520px] mx-auto mt-6 sm:mt-10 space-y-4 sm:space-y-6">
                {/* City Dropdown */}
                <div ref={cityRef}>
                  <div
                    onClick={() => {
                      setCityOpen(!cityOpen);
                      setBudgetOpen(false);
                    }}
                    className={`w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] flex items-center justify-between px-4 sm:px-6 cursor-pointer ${!selectedCity && 'text-gray-400'}`}
                  >
                    <span className="truncate">
                      {selectedCity || "Choose Interior Setup"}
                    </span>
                    <span className="text-gray-500">&#9662;</span>
                  </div>
                  {cityOpen && (
                    <ul className="absolute top-[60px] left-0 w-full bg-white border border-gray-300 rounded-xl lg:rounded-2xl shadow-lg z-10 text-left max-h-60 overflow-y-auto font-medium">
                      {cityOptions.map((option) => (
                        <li
                          key={option}
                          onClick={() => handleCitySelect(option)}
                          className="px-4 sm:px-6 py-2 hover:bg-gray-100 cursor-pointer text-gray-700 text-xs sm:text-sm"
                        >
                          {option}
                        </li>
                      ))}
                    </ul>
                  )}
                </div>
                {/* Budget Dropdown */}
                <div ref={budgetRef}>
                  <div
                    onClick={() => {
                      setBudgetOpen(!budgetOpen);
                      setCityOpen(false);
                    }}
                    className={`w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] mt-6 sm:mt-10 flex items-center justify-between px-4 sm:px-6 cursor-pointer ${!selectedBudget && 'text-gray-400'}`}
                  >
                    <span>
                      {selectedBudget || "Possession In"}
                    </span>
                    <span className="text-gray-500">&#9662;</span>
                  </div>
                  {budgetOpen && (
                    <ul className="absolute top-[110px] sm:top-[130px] left-0 w-full bg-white border border-gray-300 rounded-xl lg:rounded-2xl shadow-lg z-10 text-left max-h-60 overflow-y-auto font-medium">
                      {budgetOptions.map((option) => (
                        <li
                          key={option}
                          onClick={() => handleBudgetSelect(option)}
                          className="px-4 sm:px-6 py-2 hover:bg-gray-100 cursor-pointer text-gray-700 text-xs sm:text-sm"
                        >
                          {option}
                        </li>
                      ))}
                    </ul>
                  )}
                </div>
              </div>
              {/* Checkbox and Button Container */}
              <div className=" sm:flex-row items-center justify-between mt-6 sm:mt-8 gap-4">
                {/* WhatsApp Checkbox */}
                <div className="flex items-center w-full sm:w-auto justify-center sm:justify-start lg:ml-2">
                  <input
                    type="checkbox"
                    required
                    checked={whatsappConsent}
                    onChange={() => setWhatsappConsent(!whatsappConsent)}
                    className="size-4 sm:size-5 accent-[#DDCDC1] flex-shrink-0"
                  />
                  <label className="text-sm sm:text-[16px] font-light ml-2 sm:ml-3 whitespace-nowrap">
                    Send Me Updates On WhatsApp
                  </label>
                </div>
                {/* Next Button */}
                <button
                  type="submit"
                  className="flex w-[180px] sm:w-[200px] h-[45px] sm:h-[50px] bg-[#DDCDC1] rounded-3xl lg:rounded-4xl text-xl sm:text-2xl lg:text-[24px] font-medium justify-center items-center lg:mt-8"
                >
                  <p>Next</p>
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="size-5 sm:size-6 lg:size-7 ml-2">
                    <path strokeLinecap="round" strokeLinejoin="round" d="m12.75 15 3-3m0 0-3-3m3 3h-7.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                  </svg>
                </button>
              </div>
              {/* Legal Text */}
              <div className="text-xs sm:text-sm lg:text-[14px] mt-4 sm:mt-6 font-medium text-center sm:text-left mr-0 sm:mr-26 lg:ml-2">
                By Submitting This Form, You Agree To The{" "}
                <span className="text-[#DDCDC1]">Privacy Policy</span> &{" "}
                <span className="text-[#DDCDC1]">Terms & Conditions</span>
              </div>
            </div>
          </div>
          {/* Right side - Image/Placeholder */}
          <div className="hidden lg:block min-w-[400px] lg:min-w-[750px] h-[500px] lg:h-[785px] rounded-r-3xl lg:rounded-r-4xl relative overflow-hidden">
            {/* Carousel Image */}
            <img
              className="min-w-[400px] lg:min-w-[750px] h-[500px] lg:h-[785px] rounded-r-3xl lg:rounded-r-4xl object-cover transition-all duration-500"
              src={carouselImages[carouselIndex]}
              alt={`Carousel ${carouselIndex + 1}`}
            />
            {/* Overlayed Headings and Button */}
            <div className="absolute left-10 bottom-10 text-left z-10">
              <h1 className="text-white text-6xl font-bold leading-tight mb-0 drop-shadow-lg">Best Interior<p className="mb-1">Designers</p></h1>
              <p className="text-white text-xl font-medium drop-shadow mb-2">Transforming Bangalore homes with personalized<br/>interiors that reflect your lifestyle.</p>
            </div>
            <div className="w-[200px] h-[50px] bg-[#DDCDC1] rounded-4xl text-center py-3 font-bold absolute -mt-190 ml-132 tracking-wider text-[18px] z-20"> GET FREE QUOTE</div>
          </div>
        </div>
      </div>
    </form>
    <Section1/>
    </div>
  );
}



//////



export default function Section1(){
    return(
        <div className="w-screen h-[700px] bg-[#F1F2F6]">
           <h1 className="lg:pt-10 lg:m-10 lg:ml-16 lg:text-6xl text-4xl mt-14 ml-8  manrope-medium  ">Why We're Different?</h1>
           <div className="flex justify-between lg:m-20 lg:mt-28 mt-18">
           <div className="lg:w-[150px] lg:h-[180px] border-3 border-[#DDCDC1] rounded-2xl "> <img className="size-30 lg:mr-20 lg:ml-2 lg:mt-4" src="fast-delivery.png"></img>
           <div className="lg:pl-3 lg:text-[14px]">34 Days Delivery</div>
           </div>
           <div className="lg:w-[150px] lg:h-[180px] border-3 border-[#DDCDC1] rounded-2xl "> <img className="size-30 lg:mr-20 lg:ml-2 lg:mt-4" src="CALENDER.png"></img>
           <div className="lg:pl-3 lg:text-[14px]">10 Years Waranty </div>
           </div>
           <div className="lg:w-[150px] lg:h-[180px] border-3 border-[#DDCDC1] rounded-2xl "> <img className="size-30 lg:mr-20 lg:ml-2 lg:mt-4" src="QUALITYU.png"></img>
           <p className="lg:pl-2 lg:text-[14px] tracking-tighter">150+ Quality Checkes</p>
           </div>
           <div className="lg:w-[150px] lg:h-[180px] border-3 border-[#DDCDC1] rounded-2xl "> <img className="size-30 lg:mr-20 lg:ml-2 lg:mt-4" src="EMI.png"></img>
           <div className="lg:pl-3 lg:text-[14px]">0% Emi Options</div>
           </div>
           <div className="lg:w-[150px] lg:h-[180px] border-3 border-[#DDCDC1] rounded-2xl "> <img className="size-30 lg:mr-20 lg:ml-4 lg:mt-4" src="FACTORY.png"></img>
           <div className="lg:pl-6 lg:text-[14px]">Factory Finish</div>
           </div>
           </div>
        </div>
    )
}



'use client';

import { useState, useEffect } from "react";

export default function Section1() {
  const [currentSlide, setCurrentSlide] = useState(0);
  
  const features = [
    {
      icon: "/fast-delivery.png",
      title: "34 Days Delivery",
      description: "Fast and reliable project completion"
    },
    {
      icon: "/CALENDER.png",
      title: "10 Years Warranty",
      description: "Long-term protection for your investment"
    },
    {
      icon: "/QUALITYU.png",
      title: "150+ Quality Checks",
      description: "Rigorous quality control processes"
    },
    {
      icon: "/EMI.png",
      title: "0% EMI Options",
      description: "Flexible payment plans available"
    },
    {
      icon: "/FACTORY.png",
      title: "Factory Finish",
      description: "Premium materials and craftsmanship"
    }
  ];

  // Auto-rotate carousel
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentSlide((prev) => (prev === features.length - 1 ? 0 : prev + 1));
    }, 3000);
    return () => clearInterval(interval);
  }, []);

  const nextSlide = () => {
    setCurrentSlide((prev) => (prev === features.length - 1 ? 0 : prev + 1));
  };

  const prevSlide = () => {
    setCurrentSlide((prev) => (prev === 0 ? features.length - 1 : prev - 1));
  };

  return (
    <div className="w-screen min-h-[700px] bg-[#F1F2F6] py-10">
      <h1 className="lg:pt-10 lg:m-10 lg:ml-16 lg:text-6xl text-4xl mt-14 ml-8 manrope-medium">
        Why We're Different.
      </h1>

      {/* Desktop Grid View */}
      <div className="hidden lg:flex justify-between lg:m-20 lg:mt-28 mt-18">
        {features.map((feature, index) => (
          <div 
            key={index}
            className="w-[150px] h-[180px] border-2 border-[#DDCDC1] rounded-2xl flex flex-col items-center justify-center p-4 hover:shadow-lg transition-all"
          >
            <img className="w-16 h-16 mb-4" src={feature.icon} alt={feature.title} />
            <div className="text-center text-[14px] font-medium">{feature.title}</div>
          </div>
        ))}
      </div>

      {/* Mobile Carousel */}
      <div className="lg:hidden relative overflow-hidden mt-10 mx-4">
        <div 
          className="flex transition-transform duration-500 ease-in-out"
          style={{ transform: `translateX(-${currentSlide * 100}%)` }}
        >
          {features.map((feature, index) => (
            <div 
              key={index}
              className="w-full flex-shrink-0 px-4"
            >
              <div className="w-full h-[200px] border-2 border-[#DDCDC1] rounded-2xl flex flex-col items-center justify-center p-6">
                <img className="w-16 h-16 mb-4" src={feature.icon} alt={feature.title} />
                <div className="text-center text-lg font-medium">{feature.title}</div>
                <p className="text-sm text-center mt-2 text-gray-600">{feature.description}</p>
              </div>
            </div>
          ))}
        </div>

        {/* Navigation Arrows */}
        {/* <button 
          onClick={prevSlide}
          className="absolute left-0 top-1/2 -translate-y-1/2 bg-white p-2 rounded-full shadow-md z-10"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="#DDCDC1">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
          </svg>
        </button>
        <button 
          onClick={nextSlide}
          className="absolute right-0 top-1/2 -translate-y-1/2 bg-white p-2 rounded-full shadow-md z-10"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="#DDCDC1">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
          </svg>
        </button> */}

        {/* Dots Indicator */}
        <div className="flex justify-center mt-6 space-x-2">
          {features.map((_, index) => (
            <button
              key={index}
              onClick={() => setCurrentSlide(index)}
              className={`w-3 h-3 rounded-full ${currentSlide === index ? 'bg-[#DDCDC1]' : 'bg-gray-300'}`}
            />
          ))}
        </div>
      </div>
    </div>
  );
}



export default function Section3(){

    return(
        // desktop
        <>
       <div className="hidden lg:block">
         <div className="flex w-screen h-[720px] bg-[#f1f2f6]">
             <div>
           <div className="text-[72px] mt-10 ml-10 tracking-wide manrope-medium w-[490px]"> Homes For Every Budget </div>
           <div className="ml-10 mt-10 ">
            <p className="text-[26px]  tracking-wide">Whether you dream of a stylish modular</p>
            <p className="text-[27px]  tracking-wide">kitchen or a stunning home interior </p>
            <p className="text-[27px]  tracking-wide">designed for comfort and elegance we</p>
            <p className="text-[27px]  tracking-wide">create spaces you'll love within your</p>
            <p className="text-[27px]  tracking-wide">budget</p>
            <button className="text-white bg-red-500 mt-12 w-[300px] h-[50px] font-bold rounded-full text-[20px]">Book A Free Design Session</button>
           </div>
           </div>
           <div className="w-[870px] h-[720px] mt-18 ml-20">
                <div className="w-[380px] h-[500px] bg-white ml-20 rounded-4xl grid grid-rows-5">
                    <img src="4.png" alt="" className=" rounded-t-4xl row-span-3 w-[400px] h-[350px]" />
                    <div  className="row-span-2 mt-18 ml-5">
                    <div className="text-[30px] font-semibold" >4 BHK</div>
                    <div className="mt-1 text-2xl manrope-medium">Starting @ 5.5L*</div>
                    </div>
                </div>
           </div>
        </div>
       </div>
       {/* mobile */}
       <div className="lg:hidden w-screen h-[700px] bg-[#f1f2f6]">
        <div className="flex">
        <div className="w-1 h-25 bg-amber-300 mt-10 ml-4"></div>
        <h1 className="text-5xl pl-3 pt-10 tracking-wide font-light">Homes For Every Budget</h1>
        </div>
        <div className="ml-5 mt-5">
            <div>Whether you dream of a stylish modular kitchen or a</div>
            <div>stunning home interior designed for comfort and</div>
            <div>elegance we create spaces you'll love within your budget</div>
        </div>

       </div>

       </>
    )

}


i want this design in mobile version and i have create that heading and next paragrapgh so dont change u create this card effect after that and this card as to be swipabale



'use client'
import { useState, useEffect } from 'react';

export default function Section3() {
    const [currentSlide, setCurrentSlide] = useState(0);
    const slides = [
        {
            img: "/4.png",
            type: "4 BHK",
            price: "Starting @ 5.5L*"
        },
        {
            img: "/3.png",
            type: "3 BHK",
            price: "Starting @ 4.5L*"
        },
        {
            img: "/2.png",
            type: "2 BHK",
            price: "Starting @ 3.5L*"
        },
        {
            img: "/2.png",
            type: "2 BHK",
            price: "Starting @ 3.5L*"
        }
    ];

    // Auto slide effect
    useEffect(() => {
        const interval = setInterval(() => {
            setCurrentSlide((prev) => (prev === slides.length - 1 ? 0 : prev + 1));
        }, 3000);
        return () => clearInterval(interval);
    }, [slides.length]);

    // Card and container widths
    const cardWidth = 380;
    const gap = 96; // px, for gap-x-24
    const containerWidth = cardWidth + cardWidth / 2 + gap / 2; // 1.5 cards + half gap

    return (
        <>
            {/* desktop */}
            <div className="hidden lg:block">
                <div className="flex w-screen h-[720px] bg-[#f1f2f6]">
                    <div className='w-[850px]'>
                        <div className="text-[72px] mt-10 ml-10 tracking-wide manrope-medium w-[490px]">Homes For Every Budget</div>
                        <div className="ml-10 mt-10">
                            <p className="text-[28px] tracking-wide">Whether you dream of a stylish modular</p>
                            <p className="text-[28px] tracking-wide">kitchen or a stunning home interior </p>
                            <p className="text-[28px] tracking-wide">designed for comfort and elegance we</p>
                            <p className="text-[28px] tracking-wide">create spaces you'll love within your</p>
                            <p className="text-[28px] tracking-wide">budget</p>
                            <button className="text-white bg-red-500 mt-12 w-[300px] h-[50px] font-bold rounded-full text-[20px]">Book A Free Design Session</button>
                        </div>
                    </div>
                    <div className="w-[1200px] h-[720px] mt-18 ml-40 relative overflow-hidden flex items-center">
                        {/* Slider container: 1.5 cards visible */}
                        <div
                            className="flex gap-x-24 transition-transform duration-500 ease-in-out h-full"
                            style={{
                                width: `${slides.length * cardWidth + (slides.length - 1) * gap}px`,
                                transform: `translateX(-${currentSlide * (cardWidth + gap)}px)`
                            }}
                        >
                            {slides.map((slide, index) => (
                                <div
                                    key={index}
                                    className="w-[380px] h-[550px] bg-white rounded-4xl grid grid-rows-5 flex-shrink-0"
                                >
                                    <img
                                        src={slide.img}
                                        alt=""
                                        className="rounded-t-4xl row-span-3 w-full h-[350px] object-cover"
                                    />
                                    <div className="row-span-2 mt-18 ml-5">
                                        <div className="text-[30px] font-semibold">{slide.type}</div>
                                        <div className="mt-1 text-2xl manrope-medium">{slide.price}</div>
                                    </div>
                                </div>
                            ))}
                        </div>
                        {/* Overlay to create the half-card effect */}
                        <div
                            className="pointer-events-none absolute top-0 right-0 h-full"
                            style={{ width: cardWidth / 4, background: '#f1f2f6' }}
                        />
                    </div>
                </div>
            </div>

            {/* mobile */}
            <div className="lg:hidden w-screen h-[700px] bg-[#f1f2f6]">
                <div className="flex">
                    <div className="w-1 h-25 bg-amber-300 mt-10 ml-4"></div>
                    <h1 className="text-5xl pl-3 pt-10 tracking-wide font-light">Homes For Every Budget</h1>
                </div>
                <div className="ml-5 mt-5">
                    <div>Whether you dream of a stylish modular kitchen or a</div>
                    <div>stunning home interior designed for comfort and</div>
                    <div>elegance we create spaces you'll love within your budget</div>
                </div>
            </div>
        </>
    )
}


'use client';

import { useEffect, useRef, useState } from "react";
import {Pincode} from "./Pincode"

const carouselImages = [
  "/3.png",
  "/1.png",
  "/2.png",
  "/3.png",
  "/4.png",
];

export default function HeroSections() {
  const [cityOpen, setCityOpen] = useState(false);
  const [budgetOpen, setBudgetOpen] = useState(false);
  const [selectedCity, setSelectedCity] = useState("");
  const [selectedBudget, setSelectedBudget] = useState("");
  const [selectedPincode, setSelectedPincode] = useState("");
  const [whatsappConsent, setWhatsappConsent] = useState(true);
  const [carouselIndex, setCarouselIndex] = useState(0);
  // Auto-slide effect
  useEffect(() => {
    const interval = setInterval(() => {
      setCarouselIndex((prev) => (prev === carouselImages.length - 1 ? 0 : prev + 1));
    }, 3000); // 3 seconds
    return () => clearInterval(interval);
  }, []);

  const cityRef = useRef<HTMLDivElement>(null);
  const budgetRef = useRef<HTMLDivElement>(null);

  const cityOptions = [
    "2BHK Essential Interiors [ Starting at 2.8 Lakhs (Including Modular kitchen, wardrobes, TV unit, Crockery units) ]",
    "3 BHK Essential Interiors [ Starting at 3.8 Lakhs (Including Modular kitchen, wardrobes, TV unit, Crockery units) ]",
    "4BHK Essential Interiors [ Starting at 5.5 Lakhs (Including Modular kitchen, wardrobes, TV unit, Crockery units) ]",
    "2 BHK End-to-End Interiors [3 - 5 Lakhs]",
    "3 BHK End-to-End Interiors [5 - 7 Lakhs]",
    "4 BHK End-to-End Interiors [7 - 9 Lakhs]",
  ];

  const budgetOptions = [
    "Immediately",
    "0-3 Months",
    "3-6 Months",
  ];

  const handleCitySelect = (value: string) => {
    setSelectedCity(value);
    setCityOpen(false);
  };

  const handleBudgetSelect = (value: string) => {
    setSelectedBudget(value);
    setBudgetOpen(false);
  };

  const handlePrev = () => setCarouselIndex((prev) => (prev === 0 ? carouselImages.length - 1 : prev - 1));
  const handleNext = () => setCarouselIndex((prev) => (prev === carouselImages.length - 1 ? 0 : prev + 1));

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (cityRef.current && !cityRef.current.contains(event.target as Node)) {
        setCityOpen(false);
      }
      if (budgetRef.current && !budgetRef.current.contains(event.target as Node)) {
        setBudgetOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedCity || !selectedBudget || !selectedPincode || !whatsappConsent) {
      alert("Please fill out all required fields.");
      return;
    }
    alert("Form submitted successfully!");
  };

  return (
    <div>
    <form onSubmit={handleSubmit}>
      {/* Mobile/Tablet Hero Section Redesigned */}
      <div className="block lg:hidden relative w-full h-[370px] sm:h-[420px] mb-0">
        {/* Background image */}
        <img src="1.png" alt="Hero" className="absolute inset-0 w-full h-full object-cover rounded-b-3xl" />
        {/* Overlay */}
        <div className="absolute inset-0 bg-black bg-opacity-60 rounded-b-3xl"></div>
        {/* Logo and Button Row */}
        <div className="absolute top-4 left-4 right-4 flex items-center justify-between z-10">
          <img src="/hub.png" alt="Logo" className="h-[38px]" />
          <button type="button" className="bg-[#DDCDC1] text-amber-950 rounded-full px-5 py-2 text-sm font-semibold shadow-md">GET FREE QUOTE</button>
        </div>
        <img src="1.png" alt="Hero" className="absolute inset-0 w-full h-full object-cover rounded-b-3xl" />

        {/* Centered Heading and Subheading */}
        <div className="absolute inset-0 flex flex-col items-center justify-center text-center px-4 z-10">
          <h1 className="text-white text-4xl font-bold leading-tight mb-2 drop-shadow-lg">Best Interior<br/>Designers</h1>
          <p className="text-white text-base font-medium drop-shadow mb-2">Transforming Bangalore homes with personalized<br/>interiors that reflect your lifestyle.</p>
        </div>
      </div>
      {/* Overlapping Form Card */}
      <div className="block lg:hidden relative z-20 -mt-10 px-2">
        <div className="bg-white w-full rounded-3xl shadow-2xl pt-8 pb-4 px-3">
          <div className="text-2xl font-semibold text-center mb-6 text-amber-950">Interiors For Every Budget</div>
          {/* Place the rest of the form here (inputs, dropdowns, checkbox, button, etc.) */}
          <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center">
            <input 
              type="text" 
              name="name" 
              placeholder="Name" 
              required 
              className="w-full sm:w-[250px] h-[50px] bg-[#f1f2f6] mt-4 sm:mt-12 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
            />
            <input 
              type="email" 
              name="email" 
              placeholder="Email" 
              required 
              className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-4 sm:mt-12 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
            />
          </div>
          <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center">
            <input 
              type="tel" 
              name="phone" 
              placeholder="Phone Number" 
              required 
              className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-6 sm:mt-10 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
            />
            {/* Unified Pincode Dropdown - styled like other dropdowns, mobile and desktop */}
            <div className="relative w-full sm:w-[250px] mt-4 sm:mt-10">
              <select
                name="pincode"
                required
                value={selectedPincode}
                onChange={e => setSelectedPincode(e.target.value)}
                className="w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] pl-6 sm:pl-8 pr-10 lg:pr-16 text-gray-400 appearance-none cursor-pointer"
              >
                <option className="text-gray-400" value="" disabled>Property Pincode</option>
                {Pincode.map((pin, idx) => (
                  <option key={idx} value={pin}>{pin}</option>
                ))}
              </select>
              {/* Custom dropdown arrow icon */}
              <span className="text-gray-500 mt-3 -ml-6 text-[18px] absolute">&#9662;</span>
            </div>
          </div>
          {/* Restore City and Budget Dropdowns */}
          <div className="relative w-full sm:w-[520px] mx-auto mt-6 sm:mt-10 space-y-4 sm:space-y-6">
            {/* City Dropdown */}
            <div ref={cityRef}>
              <div
                onClick={() => {
                  setCityOpen(!cityOpen);
                  setBudgetOpen(false);
                }}
                className={`w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] flex items-center justify-between px-4 sm:px-6 cursor-pointer ${!selectedCity && 'text-gray-400'}`}
              >
                <span className="truncate">
                  {selectedCity || "Choose Interior Setup"}
                </span>
                <span className="text-gray-500">&#9662;</span>
              </div>
              {cityOpen && (
                <ul className="absolute top-[60px] left-0 w-full bg-white border border-gray-300 rounded-xl lg:rounded-2xl shadow-lg z-10 text-left max-h-60 overflow-y-auto font-medium">
                  {cityOptions.map((option) => (
                    <li
                      key={option}
                      onClick={() => handleCitySelect(option)}
                      className="px-4 sm:px-6 py-2 hover:bg-gray-100 cursor-pointer text-gray-700 text-xs sm:text-sm"
                    >
                      {option}
                    </li>
                  ))}
                </ul>
              )}
            </div>
            {/* Budget Dropdown */}
            <div ref={budgetRef}>
              <div
                onClick={() => {
                  setBudgetOpen(!budgetOpen);
                  setCityOpen(false);
                }}
                className={`w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] mt-6 sm:mt-10 flex items-center justify-between px-4 sm:px-6 cursor-pointer ${!selectedBudget && 'text-gray-400'}`}
              >
                <span>
                  {selectedBudget || "Possession In"}
                </span>
                <span className="text-gray-500">&#9662;</span>
              </div>
              {budgetOpen && (
                <ul className="absolute top-[110px] sm:top-[130px] left-0 w-full bg-white border border-gray-300 rounded-xl lg:rounded-2xl shadow-lg z-10 text-left max-h-60 overflow-y-auto font-medium">
                  {budgetOptions.map((option) => (
                    <li
                      key={option}
                      onClick={() => handleBudgetSelect(option)}
                      className="px-4 sm:px-6 py-2 hover:bg-gray-100 cursor-pointer text-gray-700 text-xs sm:text-sm"
                    >
                      {option}
                    </li>
                  ))}
                </ul>
              )}
            </div>
          </div>
          {/* Checkbox and Button Container */}
          <div className="flex flex-col items-start mt-6 sm:mt-8 gap-3">
            {/* WhatsApp Checkbox */}
            <div className="flex items-center w-full sm:w-auto justify-start mb-3 lg:mb-0 lg:ml-2">
              <input
                type="checkbox"
                required
                checked={whatsappConsent}
                onChange={() => setWhatsappConsent(!whatsappConsent)}
                className="size-4 sm:size-5 accent-[#DDCDC1] flex-shrink-0"
              />
              <label className="text-sm sm:text-[16px] font-light ml-2 sm:ml-6 whitespace-normal break-words">
                Send Me Updates On WhatsApp
              </label>
            </div>
            {/* Next Button */}
            <button
              type="submit"
              className="flex w-[180px] sm:w-[200px] h-[45px] sm:h-[50px] bg-[#DDCDC1] rounded-3xl lg:rounded-4xl text-xl sm:text-2xl lg:text-[24px] font-medium justify-center items-center lg:mt-2"
            >
              <p>Submit</p>
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="size-5 sm:size-6 lg:size-7 ml-2">
                <path strokeLinecap="round" strokeLinejoin="round" d="m12.75 15 3-3m0 0-3-3m3 3h-7.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
              </svg>
            </button>
          </div>
          {/* Legal Text */}
          <div className="text-xs sm:text-sm lg:text-[14px] mt-4 sm:mt-6 font-medium text-center sm:text-left mr-0 sm:mr-26 lg:ml-2">
            By Submitting This Form, You Agree To The{" "}
            <span className="text-[#DDCDC1]">Privacy Policy</span> &{" "}
            <span className="text-[#DDCDC1]">Terms & Conditions</span>
          </div>
        </div>
      </div>
      {/* Desktop/Tablet Layout */}
      <div className="hidden lg:block bg-[#f1f2f6]  min-h-screen p-4 sm:p-6">
        <div className="flex flex-col lg:flex-row gap-6 max-w-7xl mx-auto lg:mr-30">
          {/* Left side - Form */}
          <div className="w-full lg:w-auto">
            <div className="flex justify-center lg:justify-start">
              <img src="/hub.png" alt="Logo" className="h-[40px] sm:h-[50px] lg:h-[60px] mt-2" />
            </div>
            <div className="bg-white w-full lg:min-w-[570px] h-auto lg:h-[670px] mt-6 lg:mt-12 rounded-3xl lg:rounded-4xl text-2xl sm:text-3xl lg:text-4xl font-semibold text-center p-6 sm:p-8 lg:p-10 shadow-2xl">
              <p className="lg:mr-20 mb-6 lg:mb-0">Interiors For Every Budget</p>
              <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center">
                <input 
                  type="text" 
                  name="name" 
                  placeholder="Name" 
                  required 
                  className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-4 sm:mt-12 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
                />
                <input 
                  type="email" 
                  name="email" 
                  placeholder="Email" 
                  required 
                  className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-4 sm:mt-12 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
                />
              </div>
              <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center">
                <input 
                  type="tel" 
                  name="phone" 
                  placeholder="Phone Number" 
                  required 
                  className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-6 sm:mt-10 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
                />
                {/* Unified Pincode Dropdown - styled like other dropdowns, mobile and desktop */}
                <div className="relative w-full sm:w-[250px] mt-4 sm:mt-10">
                  <select
                    name="pincode"
                    required
                    value={selectedPincode}
                    onChange={e => setSelectedPincode(e.target.value)}
                    className="w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] pl-6 sm:pl-8 pr-10 lg:pr-16 text-gray-400 appearance-none cursor-pointer"
                  >
                    <option className="text-gray-400" value="" disabled>Property Pincode</option>
                    {Pincode.map((pin, idx) => (
                      <option key={idx} value={pin}>{pin}</option>
                    ))}
                  </select>
                  {/* Custom dropdown arrow icon */}
                  <span className="text-gray-500 absolute mt-4 -ml-8 text-[16px]">&#9662;</span>
                </div>
              </div>
              {/* Restore City and Budget Dropdowns */}
              <div className="relative w-full sm:w-[520px] mx-auto mt-6 sm:mt-10 space-y-4 sm:space-y-6">
                {/* City Dropdown */}
                <div ref={cityRef}>
                  <div
                    onClick={() => {
                      setCityOpen(!cityOpen);
                      setBudgetOpen(false);
                    }}
                    className={`w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] flex items-center justify-between px-4 sm:px-6 cursor-pointer ${!selectedCity && 'text-gray-400'}`}
                  >
                    <span className="truncate">
                      {selectedCity || "Choose Interior Setup"}
                    </span>
                    <span className="text-gray-500">&#9662;</span>
                  </div>
                  {cityOpen && (
                    <ul className="absolute top-[60px] left-0 w-full bg-white border border-gray-300 rounded-xl lg:rounded-2xl shadow-lg z-10 text-left max-h-60 overflow-y-auto font-medium">
                      {cityOptions.map((option) => (
                        <li
                          key={option}
                          onClick={() => handleCitySelect(option)}
                          className="px-4 sm:px-6 py-2 hover:bg-gray-100 cursor-pointer text-gray-700 text-xs sm:text-sm"
                        >
                          {option}
                        </li>
                      ))}
                    </ul>
                  )}
                </div>
                {/* Budget Dropdown */}
                <div ref={budgetRef}>
                  <div
                    onClick={() => {
                      setBudgetOpen(!budgetOpen);
                      setCityOpen(false);
                    }}
                    className={`w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] mt-6 sm:mt-10 flex items-center justify-between px-4 sm:px-6 cursor-pointer ${!selectedBudget && 'text-gray-400'}`}
                  >
                    <span>
                      {selectedBudget || "Possession In"}
                    </span>
                    <span className="text-gray-500">&#9662;</span>
                  </div>
                  {budgetOpen && (
                    <ul className="absolute top-[110px] sm:top-[130px] left-0 w-full bg-white border border-gray-300 rounded-xl lg:rounded-2xl shadow-lg z-10 text-left max-h-60 overflow-y-auto font-medium">
                      {budgetOptions.map((option) => (
                        <li
                          key={option}
                          onClick={() => handleBudgetSelect(option)}
                          className="px-4 sm:px-6 py-2 hover:bg-gray-100 cursor-pointer text-gray-700 text-xs sm:text-sm"
                        >
                          {option}
                        </li>
                      ))}
                    </ul>
                  )}
                </div>
              </div>
              {/* Checkbox and Button Container */}
              <div className=" sm:flex-row items-center justify-between mt-6 sm:mt-8 gap-4">
                {/* WhatsApp Checkbox */}
                <div className="flex items-center w-full sm:w-auto justify-center sm:justify-start lg:ml-2">
                  <input
                    type="checkbox"
                    required
                    checked={whatsappConsent}
                    onChange={() => setWhatsappConsent(!whatsappConsent)}
                    className="size-4 sm:size-5 accent-[#DDCDC1] flex-shrink-0"
                  />
                  <label className="text-sm sm:text-[16px] font-light ml-2 sm:ml-3 whitespace-nowrap">
                    Send Me Updates On WhatsApp
                  </label>
                </div>
                {/* Next Button */}
                <button
                  type="submit"
                  className="flex w-[180px] sm:w-[200px] h-[45px] sm:h-[50px] bg-[#DDCDC1] rounded-3xl lg:rounded-4xl text-xl sm:text-2xl lg:text-[24px] font-medium justify-center items-center lg:mt-8"
                >
                  <p>Submit</p>
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="size-5 sm:size-6 lg:size-7 ml-2">
                    <path strokeLinecap="round" strokeLinejoin="round" d="m12.75 15 3-3m0 0-3-3m3 3h-7.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                  </svg>
                </button>
              </div>
              {/* Legal Text */}
              <div className="text-xs sm:text-sm lg:text-[14px] mt-4 sm:mt-6 font-medium text-center sm:text-left mr-0 sm:mr-26 lg:ml-2">
                By Submitting This Form, You Agree To The{" "}
                <span className="text-[#DDCDC1]">Privacy Policy</span> &{" "}
                <span className="text-[#DDCDC1]">Terms & Conditions</span>
              </div>
            </div>
          </div>
          {/* Right side - Image/Placeholder */}
          <div className="hidden lg:block min-w-[400px] lg:min-w-[750px] h-[500px] lg:h-[785px] rounded-r-3xl lg:rounded-r-4xl relative overflow-hidden">
            {/* Carousel Image */}
            <img
              className="min-w-[400px] lg:min-w-[750px] h-[500px] lg:h-[785px] rounded-r-3xl lg:rounded-r-4xl object-cover transition-all duration-500"
              src={carouselImages[carouselIndex]}
              alt={`Carousel ${carouselIndex + 1}`}
            />
            {/* Overlayed Headings and Button */}
            <div className="absolute left-10 bottom-10 text-left z-10">
              <h1 className="text-white text-6xl font-bold leading-tight mb-0 drop-shadow-lg">Best Interior<p className="mb-1">Designers</p></h1>
              <p className="text-white text-xl font-medium drop-shadow mb-2">Transforming Bangalore homes with personalized<br/>interiors that reflect your lifestyle.</p>
            </div>
            <div className="w-[200px] h-[50px] bg-[#DDCDC1] rounded-4xl text-center py-3 font-bold absolute -mt-190 ml-132 tracking-wider text-[18px] z-20"> GET FREE QUOTE</div>
          </div>
        </div>
      </div>
    </form>
    </div>
  );
}




'use client'
import { useEffect,useState } from "react"
import React from "react"
import {getAuth,RecaptchaVerifier,signInWithPhoneNumber} from "firebase/auth"
import {app} from '../config';
import { useRouter } from "next/navigation";

export default function Login(){
    const [phoneNumber,setPhoneNumber]= useState('');
    const [otp, setOtp]= useState('');
    const [confirmationResult,setConfirmationResult]=useState(null)
    const [otpSent,setOtpSent]= useState(false);
    const auth=getAuth(app);
    const router=useRouter();

    useEffect(()=>{
        window.recaptchaVerifier = new RecaptchaVerifier(auth,"recaptcha-container",{
            'size': 'normal',
            'callback': (response)=>{

            },
            'expired-callack':()=>{

            }
        })
    },[auth])

    const handlePhoneNumberChange = (e)=>{
        setPhoneNumber(e.target.value);
    };

    const handleOtpChange = (e)=>{
        setOtp(e.target.value);
    };

    const handleSendOtp = async()=>{
        try{
            const formattedPhoneNUmber= `+${phoneNumber.replace(/\D/g," ")}`
            const confirmation = await signInWithPhoneNumber(auth,formattedPhoneNUmber,window.recaptchaVerifier)
            setConfirmationResult(confirmation);
            setOtpSent(true);
            setPhoneNumber('');
            alert('Otp has been sent');
        }catch(error){
            console.error(error);
        }
       
    };

    const handleOtpSubmit = async () =>{
        try{
            await confirmationResult.confirm(otp);
            setOtp('');
            router.push('/interior-designers-in-bangalore')
        }catch (error){
            console.error(error)
        }
    };

    return <div>
        {!otpSent ? (
            <div id='recaptcha-container'></div>
        ):null}
        <input 
            type="tel"
            value={phoneNumber}
            onChange={handlePhoneNumberChange}
            placeholder="Enter Your Phone Number"
            className="border border-gray-500 p-2 rounded-md"
        />
        <input
            type="text"
            value={otp}
            onChange={handleOtpChange}
            placeholder="Enter Otp"
            className="border border-gray-500 p-2 rounded-md"
        />
        <button onClick={otpSent ? handleOtpSubmit : handleSendOtp}
            className={`bg-${otpSent ? 'green' : 'blue'}-500 text-white p-2 rounded-md m-2`}
            style={{backgroundColor: otpSent ? 'green' : 'blue'}}
        >
            {otpSent ? 'Submit OTP' : 'Send OTP'}
        </button>
    </div>
    
}



'use client'

import { useState, useEffect } from 'react';

export default function Section3() {
    const [currentSlide, setCurrentSlide] = useState(0);
    const slides = [
        {
            img: "https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//3.jpg",
            type: "4 BHK",
            price: "Starting @ 5.5L*"
        },
        {
            img: "https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//2.jpg",
            type: "3 BHK",
            price: "Starting @ 4.5L*"
        },
        {
            img: "https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//4.jpg",
            type: "2 BHK",
            price: "Starting @ 3.5L*"
        },
        {
            img: "https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//1.jpg",
            type: "2 BHK",
            price: "Starting @ 3.5L*"
        }
    ];

    // Auto slide effect
    useEffect(() => {
        const interval = setInterval(() => {
            setCurrentSlide((prev) => (prev === slides.length - 1 ? 0 : prev + 1));
        }, 3000);
        return () => clearInterval(interval);
    }, [slides.length]);

    // Card and container widths
    const cardWidth = 380;
    const gap = 96; // px, for gap-x-24
    // const containerWidth = cardWidth + cardWidth / 2 + gap / 2; // 1.5 cards + half gap

    return (
        <>
            {/* desktop */}
            <div className="hidden lg:block">
                <div className="flex w-screen h-[680px] bg-[#f1f2f6]">
                    <div className='w-[850px]'>
                        <div className="text-[72px] mt-10 ml-10 tracking-wide manrope-medium w-[490px]">Homes For Every Budget</div>
                        <div className="ml-10 mt-10">
                            <p className="text-[28px] tracking-wide">Whether you dream of a stylish modular</p>
                            <p className="text-[28px] tracking-wide">kitchen or a stunning home interior </p>
                            <p className="text-[28px] tracking-wide">designed for comfort and elegance we</p>
                            <p className="text-[28px] tracking-wide">create spaces you&#39;ll love within your</p>
                            <p className="text-[28px] tracking-wide">budget</p>
                            <button className="text-white bg-red-500 mt-12 w-[300px] h-[50px] font-bold rounded-full text-[20px]">Book A Free Design Session</button>
                        </div>
                    </div>
                    <div className="w-[1200px] h-[720px] mt-18 ml-40 relative overflow-hidden flex items-center">
                        {/* Slider container: 1.5 cards visible */}
                        <div
                            className="flex gap-x-24 transition-transform duration-500 ease-in-out h-full"
                            style={{
                                width: `${slides.length * cardWidth + (slides.length - 1) * gap}px`,
                                transform: `translateX(-${currentSlide * (cardWidth + gap)}px)`
                            }}
                        >
                            {slides.map((slide, index) => (
                                <div
                                    key={index}
                                    className="w-[380px] h-[520px] bg-white rounded-4xl grid grid-rows-5 flex-shrink-0"
                                >
                                    <img
                                        src={slide.img}
                                        alt=""
                                        className="rounded-t-4xl row-span-3 w-full h-[350px] object-cover"
                                    />
                                    <div className="row-span-2 mt-18 ml-5">
                                        <div className="text-[30px] font-semibold">{slide.type}</div>
                                        <div className="mt-1 text-2xl manrope-medium">{slide.price}</div>
                                    </div>
                                </div>
                            ))}
                        </div>
                        {/* Overlay to create the half-card effect */}
                        <div
                            className="pointer-events-none absolute top-0 right-0 h-full"
                            style={{ width: cardWidth / 4, background: '#f1f2f6' }}
                        />
                    </div>
                </div>
            </div>

            {/* mobile */}
            <div className="lg:hidden w-screen min-h-[850px] bg-[#f1f2f6]">
                <div className="flex">
                    <div className="w-1 h-25 bg-amber-300 mt-10 ml-4"></div>
                    <h1 className="text-5xl pl-3 pt-10 tracking-wide font-light">Homes For Every Budget</h1>
                </div>
                <div className="ml-5 mt-5">
                    <div>Whether you dream of a stylish modular kitchen or a</div>
                    <div>stunning home interior designed for comfort and</div>
                    <div>elegance we create spaces you&#39ll love within your budget</div>
                </div>
                {/* Stacked Card Carousel */}
                <div className='flex'>
                <div className="w-1 h-30 bg-amber-300 mt-50 ml-5"></div>
                <div className="mt-10 px-4 relative h-[400px] w-full ml-40" style={{ maxWidth: 340 }}>
                    {slides.map((slide, idx) => {
                        // Show only the top 3 cards in the stack for performance
                        const isTop = idx === currentSlide;
                        const isSecond = idx === (currentSlide + 1) % slides.length;
                        const isThird = idx === (currentSlide + 2) % slides.length;
                        if (!(isTop || isSecond || isThird)) return null;
                        let offset = 0;
                        let scale = 1;
                        let z = 10;
                        let opacity = 1;
                        if (isSecond) {
                            offset = 50;
                            scale = 0.96;
                            z = 5;
                            opacity = 0.8;
                        } else if (isThird) {
                            offset = 100;
                            scale = 0.92;
                            z = 1;
                            opacity = 0.6;
                        }
                        return (
                            <div
                                key={idx}
                                className="absolute left-0 top-0 w-[320px] h-[420px] bg-white rounded-3xl shadow-lg flex-shrink-0"
                                style={{
                                    transform: `translateX(-${offset}px) scale(${scale})`,
                                    zIndex: z,
                                    opacity: opacity,
                                    transition: 'all 0.4s cubic-bezier(.4,2,.6,1)'
                                }}
                            >
                                <img
                                    src={slide.img}
                                    alt={slide.type}
                                    className="w-full h-[220px] object-cover rounded-t-3xl"
                                />
                                <div className="p-6">
                                    <div className="text-2xl font-bold text-[#3A2C19] mb-2">{slide.type}</div>
                                    <div className="text-lg text-[#3A2C19]">{slide.price}</div>
                                </div>
                            </div>
                        );
                    })}
                </div>
                </div>
                <div className='mt-20 ml-20 w-[280px] h-[40px] bg-red-500 pt-2 pl-8 text-white rounded-4xl font-bold'>Book A Free Design Session</div>
            </div>
        </>
    )
}




///////





'use client';

import { useEffect, useRef, useState } from "react";
import {Pincode} from "./Pincode"

const carouselImages = [
  "https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//3.png",
  "https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//1.png",
  "https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//2.png",
  "https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//3.png",
  "https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//4.png",
];

export default function HeroSections() {
  const [cityOpen, setCityOpen] = useState(false);
  const [budgetOpen, setBudgetOpen] = useState(false);
  const [selectedCity, setSelectedCity] = useState("");
  const [selectedBudget, setSelectedBudget] = useState("");
  const [selectedPincode, setSelectedPincode] = useState("");
  const [whatsappConsent, setWhatsappConsent] = useState(true);
  const [carouselIndex, setCarouselIndex] = useState(0);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState('');

  // Add state for form fields
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: ''
  });

  // Auto-slide effect
  useEffect(() => {
    const interval = setInterval(() => {
      setCarouselIndex((prev) => (prev === carouselImages.length - 1 ? 0 : prev + 1));
    }, 3000); // 3 seconds
    return () => clearInterval(interval);
  }, []);

  const cityRef = useRef<HTMLDivElement>(null);
  const budgetRef = useRef<HTMLDivElement>(null);

  const cityOptions = [
    "2BHK Essential Interiors [ Starting at 2.8 Lakhs (Including Modular kitchen, wardrobes, TV unit, Crockery units) ]",
    "3 BHK Essential Interiors [ Starting at 3.8 Lakhs (Including Modular kitchen, wardrobes, TV unit, Crockery units) ]",
    "4BHK Essential Interiors [ Starting at 5.5 Lakhs (Including Modular kitchen, wardrobes, TV unit, Crockery units) ]",
    "2 BHK End-to-End Interiors [3 - 5 Lakhs]",
    "3 BHK End-to-End Interiors [5 - 7 Lakhs]",
    "4 BHK End-to-End Interiors [7 - 9 Lakhs]",
  ];

  const budgetOptions = [
    "Immediately",
    "0-3 Months",
    "3-6 Months",
  ];

  const handleCitySelect = (value: string) => {
    setSelectedCity(value);
    setCityOpen(false);
  };

  const handleBudgetSelect = (value: string) => {
    setSelectedBudget(value);
    setBudgetOpen(false);
  };

  // const handlePrev = () => setCarouselIndex((prev) => (prev === 0 ? carouselImages.length - 1 : prev - 1));
  // const handleNext = () => setCarouselIndex((prev) => (prev === carouselImages.length - 1 ? 0 : prev + 1));

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (cityRef.current && !cityRef.current.contains(event.target as Node)) {
        setCityOpen(false);
      }
      if (budgetRef.current && !budgetRef.current.contains(event.target as Node)) {
        setBudgetOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log('Form submitted with data:', {
      name: formData.name,
      email: formData.email,
      phone: formData.phone,
      city: selectedCity,
      budget: selectedBudget,
      pincode: selectedPincode,
      whatsappConsent: whatsappConsent
    });

    if (!selectedCity || !selectedBudget || !selectedPincode || !whatsappConsent || !formData.name || !formData.email || !formData.phone) {
      alert("Please fill out all required fields.");
      return;
    }

    setIsSubmitting(true);
    setSubmitStatus('');

    try {
      const currentUrl = window.location.href;
      const requestData = {
        name: formData.name,
        email: formData.email,
        phone: formData.phone,
        city: selectedCity,
        budget: selectedBudget,
        pincode: selectedPincode,
        whatsappConsent: whatsappConsent,
        pageUrl: currentUrl
      };

      console.log('Sending data to API:', requestData);

      const response = await fetch('/api/contact', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      });

      console.log('API response status:', response.status);

      if (response.ok) {
        setSubmitStatus('success');
        // Reset form
        setSelectedCity("");
        setSelectedBudget("");
        setSelectedPincode("");
        setWhatsappConsent(true);
        setFormData({ name: '', email: '', phone: '' });
      } else {
        setSubmitStatus('error');
      }
    } catch (error) {
      console.error('Error submitting form:', error);
      setSubmitStatus('error');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div>
    <form onSubmit={handleSubmit}>
      {/* Mobile/Tablet Hero Section Redesigned */}
      <div className="block lg:hidden relative w-full h-[370px] sm:h-[420px] mb-0">
        {/* Background image */}
        <img src="https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//1.png" alt="Hero" className="absolute inset-0 w-full h-full object-cover rounded-b-3xl" />
        {/* Overlay */}
        <div className="absolute inset-0 bg-black bg-opacity-60 rounded-b-3xl"></div>
        {/* Logo and Button Row */}
        <div className="absolute top-4 left-4 right-4 flex items-center justify-between z-10">
          <img src="/hub.png" alt="Logo" className="h-[38px]" />
          <button type="button" className="bg-[#DDCDC1] text-amber-950 rounded-full px-5 py-2 text-sm font-semibold shadow-md">GET FREE QUOTE</button>
        </div>
        <img src="https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//1.png" alt="Hero" className="absolute inset-0 w-full h-full object-cover rounded-b-3xl" />

        {/* Centered Heading and Subheading */}
        <div className="absolute inset-0 flex flex-col items-center justify-center text-center px-4 z-10">
          <h1 className="text-white text-4xl font-bold leading-tight mb-2 drop-shadow-lg">Best Interior<br/>Designers</h1>
          <p className="text-white text-base font-medium drop-shadow mb-2">Transforming Bangalore homes with personalized<br/>interiors that reflect your lifestyle.</p>
        </div>
      </div>
      {/* Overlapping Form Card */}
      <div className="block lg:hidden relative z-20 -mt-10 px-2">
        <div className="bg-white w-full rounded-3xl shadow-2xl pt-8 pb-4 px-3">
          <div className="text-2xl font-semibold text-center mb-6 text-amber-950">Interiors For Every Budget</div>
          {/* Place the rest of the form here (inputs, dropdowns, checkbox, button, etc.) */}
          <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center">
            <input 
              type="text" 
              name="name" 
              value={formData.name}
              onChange={handleInputChange}
              placeholder="Name" 
              required 
              className="w-full sm:w-[250px] h-[50px] bg-[#f1f2f6] mt-4 sm:mt-12 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
            />
            <input 
              type="email" 
              name="email" 
              value={formData.email}
              onChange={handleInputChange}
              placeholder="Email" 
              required 
              className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-4 sm:mt-12 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
            />
          </div>
          <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center">
            <input 
              type="tel" 
              name="phone" 
              value={formData.phone}
              onChange={handleInputChange}
              placeholder="Phone Number" 
              required 
              className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-6 sm:mt-10 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
            />
            {/* Unified Pincode Dropdown - styled like other dropdowns, mobile and desktop */}
            <div className="relative w-full sm:w-[250px] mt-4 sm:mt-10">
              <select
                name="pincode"
                required
                value={selectedPincode}
                onChange={e => setSelectedPincode(e.target.value)}
                className="w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] pl-6 sm:pl-8 pr-10 lg:pr-16 text-gray-400 appearance-none cursor-pointer"
              >
                <option className="text-gray-400" value="" disabled>Property Pincode</option>
                {Pincode.map((pin, idx) => (
                  <option key={idx} value={pin}>{pin}</option>
                ))}
              </select>
              {/* Custom dropdown arrow icon */}
              <span className="text-gray-500 mt-3 -ml-6 text-[18px] absolute">&#9662;</span>
            </div>
          </div>
          {/* Restore City and Budget Dropdowns */}
          <div className="relative w-full sm:w-[520px] mx-auto mt-6 sm:mt-10 space-y-4 sm:space-y-6">
            {/* City Dropdown */}
            <div ref={cityRef}>
              <div
                onClick={() => {
                  setCityOpen(!cityOpen);
                  setBudgetOpen(false);
                }}
                className={`w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] flex items-center justify-between px-4 sm:px-6 cursor-pointer ${!selectedCity && 'text-gray-400'}`}
              >
                <span className="truncate">
                  {selectedCity || "Choose Interior Setup"}
                </span>
                <span className="text-gray-500">&#9662;</span>
              </div>
              {cityOpen && (
                <ul className="absolute top-[60px] left-0 w-full bg-white border border-gray-300 rounded-xl lg:rounded-2xl shadow-lg z-50 text-left max-h-60 overflow-y-auto font-medium">
                  {cityOptions.map((option) => (
                    <li
                      key={option}
                      onClick={() => handleCitySelect(option)}
                      className="px-4 sm:px-6 py-2 hover:bg-gray-100 cursor-pointer text-gray-700 text-xs sm:text-sm"
                    >
                      {option}
                    </li>
                  ))}
                </ul>
              )}
            </div>
            {/* Budget Dropdown */}
            <div ref={budgetRef}>
              <div
                onClick={() => {
                  setBudgetOpen(!budgetOpen);
                  setCityOpen(false);
                }}
                className={`w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] mt-6 sm:mt-10 flex items-center justify-between px-4 sm:px-6 cursor-pointer ${!selectedBudget && 'text-gray-400'}`}
              >
                <span>
                  {selectedBudget || "Possession In"}
                </span>
                <span className="text-gray-500">&#9662;</span>
              </div>
              {budgetOpen && (
                <ul className="absolute top-[110px] sm:top-[130px] left-0 w-full bg-white border border-gray-300 rounded-xl lg:rounded-2xl shadow-lg z-50 text-left max-h-60 overflow-y-auto font-medium">
                  {budgetOptions.map((option) => (
                    <li
                      key={option}
                      onClick={() => handleBudgetSelect(option)}
                      className="px-4 sm:px-6 py-2 hover:bg-gray-100 cursor-pointer text-gray-700 text-xs sm:text-sm"
                    >
                      {option}
                    </li>
                  ))}
                </ul>
              )}
            </div>
          </div>
          {/* Checkbox and Button Container */}
          <div className="flex flex-col items-start mt-6 sm:mt-8 gap-3">
            {/* WhatsApp Checkbox */}
            <div className="flex items-center w-full sm:w-auto justify-start mb-3 lg:mb-0 lg:ml-2">
              <input
                type="checkbox"
                required
                checked={whatsappConsent}
                onChange={() => setWhatsappConsent(!whatsappConsent)}
                className="size-4 sm:size-5 accent-[#DDCDC1] flex-shrink-0"
              />
              <label className="text-sm sm:text-[16px] font-light ml-2 sm:ml-6 whitespace-normal break-words">
                Send Me Updates On WhatsApp
              </label>
            </div>
            {/* Next Button */}
            <button
              type="submit"
              disabled={isSubmitting}
              className="flex w-[180px] sm:w-[200px] h-[45px] sm:h-[50px] bg-[#DDCDC1] rounded-3xl lg:rounded-4xl text-xl sm:text-2xl lg:text-[24px] font-medium justify-center items-center lg:mt-2 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <p>{isSubmitting ? 'Sending...' : 'Submit'}</p>
              {!isSubmitting && (
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="size-5 sm:size-6 lg:size-7 ml-2">
                  <path strokeLinecap="round" strokeLinejoin="round" d="m12.75 15 3-3m0 0-3-3m3 3h-7.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                </svg>
              )}
            </button>
          </div>
          
          {/* Success/Error Messages */}
          {submitStatus === 'success' && (
            <div className="text-green-600 text-center text-sm mt-4 font-medium">
              Thank you! We'll get back to you soon.
            </div>
          )}
          
          {submitStatus === 'error' && (
            <div className="text-red-600 text-center text-sm mt-4 font-medium">
              Something went wrong. Please try again.
            </div>
          )}
          
          {/* Legal Text */}
          <div className="text-xs sm:text-sm lg:text-[14px] mt-4 sm:mt-6 font-medium text-center sm:text-left mr-0 sm:mr-26 lg:ml-2">
            By Submitting This Form, You Agree To The{" "}
            <span className="text-[#DDCDC1]">Privacy Policy</span> &{" "}
            <span className="text-[#DDCDC1]">Terms & Conditions</span>
          </div>
        </div>
      </div>
      {/* Desktop/Tablet Layout */}
      <div className="hidden lg:block bg-[#f1f2f6]  min-h-screen p-4 sm:p-6">
        <div className="flex flex-col lg:flex-row gap-6 max-w-7xl mx-auto lg:mr-30">
          {/* Left side - Form */}
          <div className="w-full lg:w-auto">
            <div className="flex justify-center lg:justify-start">
              <img src="/hub.png" alt="Logo" className="h-[40px] sm:h-[50px] lg:h-[60px] mt-2" />
            </div>
            <div className="bg-white w-full lg:min-w-[570px] h-auto lg:h-[670px] mt-6 lg:mt-12 rounded-3xl lg:rounded-4xl text-2xl sm:text-3xl lg:text-4xl font-semibold text-center p-6 sm:p-8 lg:p-10 shadow-2xl">
              <p className="lg:mr-20 mb-6 lg:mb-0">Interiors For Every Budget</p>
              <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center">
                <input 
                  type="text" 
                  name="name" 
                  value={formData.name}
                  onChange={handleInputChange}
                  placeholder="Name" 
                  required 
                  className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-4 sm:mt-12 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
                />
                <input 
                  type="email" 
                  name="email" 
                  value={formData.email}
                  onChange={handleInputChange}
                  placeholder="Email" 
                  required 
                  className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-4 sm:mt-12 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
                />
              </div>
              <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center">
                <input 
                  type="tel" 
                  name="phone" 
                  value={formData.phone}
                  onChange={handleInputChange}
                  placeholder="Phone Number" 
                  required 
                  className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-6 sm:mt-10 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
                />
                {/* Unified Pincode Dropdown - styled like other dropdowns, mobile and desktop */}
                <div className="relative w-full sm:w-[250px] mt-4 sm:mt-10">
                  <select
                    name="pincode"
                    required
                    value={selectedPincode}
                    onChange={e => setSelectedPincode(e.target.value)}
                    className="w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] pl-6 sm:pl-8 pr-10 lg:pr-16 text-gray-400 appearance-none cursor-pointer"
                  >
                    <option className="text-gray-400" value="" disabled>Property Pincode</option>
                    {Pincode.map((pin, idx) => (
                      <option key={idx} value={pin}>{pin}</option>
                    ))}
                  </select>
                  {/* Custom dropdown arrow icon */}
                  <span className="text-gray-500 absolute mt-4 -ml-8 text-[16px]">&#9662;</span>
                </div>
              </div>
              {/* Restore City and Budget Dropdowns */}
              <div className="relative w-full sm:w-[520px] mx-auto mt-6 sm:mt-10 space-y-4 sm:space-y-6">
                {/* City Dropdown */}
                <div ref={cityRef}>
                  <div
                    onClick={() => {
                      setCityOpen(!cityOpen);
                      setBudgetOpen(false);
                    }}
                    className={`w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] flex items-center justify-between px-4 sm:px-6 cursor-pointer ${!selectedCity && 'text-gray-400'}`}
                  >
                    <span className="truncate">
                      {selectedCity || "Choose Interior Setup"}
                    </span>
                    <span className="text-gray-500">&#9662;</span>
                  </div>
                  {cityOpen && (
                    <ul className="absolute top-[60px] left-0 w-full bg-white border border-gray-300 rounded-xl lg:rounded-2xl shadow-lg z-50 text-left max-h-60 overflow-y-auto font-medium">
                      {cityOptions.map((option) => (
                        <li
                          key={option}
                          onClick={() => handleCitySelect(option)}
                          className="px-4 sm:px-6 py-2 hover:bg-gray-100 cursor-pointer text-gray-700 text-xs sm:text-sm"
                        >
                          {option}
                        </li>
                      ))}
                    </ul>
                  )}
                </div>
                {/* Budget Dropdown */}
                <div ref={budgetRef}>
                  <div
                    onClick={() => {
                      setBudgetOpen(!budgetOpen);
                      setCityOpen(false);
                    }}
                    className={`w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] mt-6 sm:mt-10 flex items-center justify-between px-4 sm:px-6 cursor-pointer ${!selectedBudget && 'text-gray-400'}`}
                  >
                    <span>
                      {selectedBudget || "Possession In"}
                    </span>
                    <span className="text-gray-500">&#9662;</span>
                  </div>
                  {budgetOpen && (
                    <ul className="absolute top-[110px] sm:top-[130px] left-0 w-full bg-white border border-gray-300 rounded-xl lg:rounded-2xl shadow-lg z-50 text-left max-h-60 overflow-y-auto font-medium">
                      {budgetOptions.map((option) => (
                        <li
                          key={option}
                          onClick={() => handleBudgetSelect(option)}
                          className="px-4 sm:px-6 py-2 hover:bg-gray-100 cursor-pointer text-gray-700 text-xs sm:text-sm"
                        >
                          {option}
                        </li>
                      ))}
                    </ul>
                  )}
                </div>
              </div>
              {/* Checkbox and Button Container */}
              <div className=" sm:flex-row items-center justify-between mt-6 sm:mt-8 gap-4">
                {/* WhatsApp Checkbox */}
                <div className="flex items-center w-full sm:w-auto justify-center sm:justify-start lg:ml-2">
                  <input
                    type="checkbox"
                    required
                    checked={whatsappConsent}
                    onChange={() => setWhatsappConsent(!whatsappConsent)}
                    className="size-4 sm:size-5 accent-[#DDCDC1] flex-shrink-0"
                  />
                  <label className="text-sm sm:text-[16px] font-light ml-2 sm:ml-3 whitespace-nowrap">
                    Send Me Updates On WhatsApp
                  </label>
                </div>
                {/* Next Button */}
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className="flex w-[180px] sm:w-[200px] h-[45px] sm:h-[50px] bg-[#DDCDC1] rounded-3xl lg:rounded-4xl text-xl sm:text-2xl lg:text-[24px] font-medium justify-center items-center lg:mt-8 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <p>{isSubmitting ? 'Sending...' : 'Submit'}</p>
                  {!isSubmitting && (
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="size-5 sm:size-6 lg:size-7 ml-2">
                      <path strokeLinecap="round" strokeLinejoin="round" d="m12.75 15 3-3m0 0-3-3m3 3h-7.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                    </svg>
                  )}
                </button>
              </div>
              
              {/* Success/Error Messages */}
              {submitStatus === 'success' && (
                <div className="text-green-600 text-center text-sm mt-4 font-medium">
                  Thank you! We'll get back to you soon.
                </div>
              )}
              
              {submitStatus === 'error' && (
                <div className="text-red-600 text-center text-sm mt-4 font-medium">
                  Something went wrong. Please try again.
                </div>
              )}
              
              {/* Legal Text */}
              <div className="text-xs sm:text-sm lg:text-[14px] mt-4 sm:mt-6 font-medium text-center sm:text-left mr-0 sm:mr-26 lg:ml-2">
                By Submitting This Form, You Agree To The{" "}
                <span className="text-[#DDCDC1]">Privacy Policy</span> &{" "}
                <span className="text-[#DDCDC1]">Terms & Conditions</span>
              </div>
            </div>
          </div>
          {/* Right side - Image/Placeholder */}
          <div className="hidden lg:block min-w-[400px] lg:min-w-[750px] h-[500px] lg:h-[785px] rounded-r-3xl lg:rounded-r-4xl relative overflow-hidden">
            {/* Carousel Image */}
            <img
              className="min-w-[400px] lg:min-w-[750px] h-[500px] lg:h-[785px] rounded-r-3xl lg:rounded-r-4xl object-cover transition-all duration-500"
              src={carouselImages[carouselIndex]}
              alt={`Carousel ${carouselIndex + 1}`}
            />
            {/* Overlayed Headings and Button */}
            <div className="absolute left-10 bottom-10 text-left z-10">
              <h1 className="text-white text-6xl font-bold leading-tight mb-0 drop-shadow-lg">Best Interior<p className="mb-1">Designers</p></h1>
              <p className="text-white text-xl font-medium drop-shadow mb-2">Transforming Bangalore homes with personalized<br/>interiors that reflect your lifestyle.</p>
            </div>
            <div className="w-[200px] h-[50px] bg-[#DDCDC1] rounded-4xl text-center py-3 font-bold absolute -mt-190 ml-132 tracking-wider text-[18px] z-20"> GET FREE QUOTE</div>
          </div>
        </div>
      </div>
    </form>
    </div>
  );
}



'use client';

import { useEffect, useRef, useState } from "react";
import {Pincode} from "./Pincode"
import cityOptions from "./DropDown1"
import {budgetOptions} from "./DropDown2"
import { getAuth, RecaptchaVerifier, signInWithPhoneNumber, ConfirmationResult } from "firebase/auth";
import { app } from '../../config';

declare global {
  interface Window {
    recaptchaVerifier?: any;
  }
}

const carouselImages = [
  "https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//3.png",
  "https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//1.png",
  "https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//2.png",
  "https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//3.png",
  "https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//4.png",
];

export default function HeroSections() {
  const [cityOpen, setCityOpen] = useState(false);
  const [budgetOpen, setBudgetOpen] = useState(false);
  const [selectedCity, setSelectedCity] = useState("");
  const [selectedBudget, setSelectedBudget] = useState("");
  const [selectedPincode, setSelectedPincode] = useState("");
  const [whatsappConsent, setWhatsappConsent] = useState(true);
  const [carouselIndex, setCarouselIndex] = useState(0);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState('');

  // OTP States
  const [showOtpModal, setShowOtpModal] = useState(false);
  const [otp, setOtp] = useState('');
  const [confirmationResult, setConfirmationResult] = useState<ConfirmationResult | null>(null);
  const [otpSent, setOtpSent] = useState(false);
  const [isOtpVerifying, setIsOtpVerifying] = useState(false);
  const [isVerified, setIsVerified] = useState(false);

  // Add state for form fields
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: ''
  });

  const auth = getAuth(app);

  // Auto-slide effect
  useEffect(() => {
    const interval = setInterval(() => {
      setCarouselIndex((prev) => (prev === carouselImages.length - 1 ? 0 : prev + 1));
    }, 3000); // 3 seconds
    return () => clearInterval(interval);
  }, []);

  const cityRef = useRef<HTMLDivElement>(null);
  const budgetRef = useRef<HTMLDivElement>(null);

  // const cityOptions = [
  //   "2BHK Essential Interiors [ Starting at 2.8 Lakhs (Including Modular kitchen, wardrobes, TV unit, Crockery units) ]",
  //   "3 BHK Essential Interiors [ Starting at 3.8 Lakhs (Including Modular kitchen, wardrobes, TV unit, Crockery units) ]",
  //   "4BHK Essential Interiors [ Starting at 5.5 Lakhs (Including Modular kitchen, wardrobes, TV unit, Crockery units) ]",
  //   "2 BHK End-to-End Interiors [3 - 5 Lakhs]",
  //   "3 BHK End-to-End Interiors [5 - 7 Lakhs]",
  //   "4 BHK End-to-End Interiors [7 - 9 Lakhs]",
  // ];

  // const budgetOptions = [
  //   "Immediately",
  //   "0-3 Months",
  //   "3-6 Months",
  // ];

  const handleCitySelect = (value: string) => {
    console.log('City selected:', value);
    setSelectedCity(value);
    setTimeout(() => setCityOpen(false), 100);
  };

  const handleBudgetSelect = (value: string) => {
    console.log('Budget selected:', value);
    setSelectedBudget(value);
    setTimeout(() => setBudgetOpen(false), 100);
  };

  // const handlePrev = () => setCarouselIndex((prev) => (prev === 0 ? carouselImages.length - 1 : prev - 1));
  // const handleNext = () => setCarouselIndex((prev) => (prev === carouselImages.length - 1 ? 0 : prev + 1));

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      setTimeout(() => {
      if (cityRef.current && !cityRef.current.contains(event.target as Node)) {
        setCityOpen(false);
      }
      if (budgetRef.current && !budgetRef.current.contains(event.target as Node)) {
        setBudgetOpen(false);
      }
      }, 10);
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  // Initialize reCAPTCHA
  useEffect(() => {
    if (showOtpModal) {
      // Clear any existing reCAPTCHA
      if (window.recaptchaVerifier) {
          window.recaptchaVerifier.clear();
        window.recaptchaVerifier = null;
      }

      // Wait for DOM to be ready
      setTimeout(() => {
    try {
          window.recaptchaVerifier = new RecaptchaVerifier(auth, "recaptcha-container", {
            'size': 'normal',
            'callback': () => {
          console.log('reCAPTCHA verified');
        },
        'expired-callback': () => {
          console.log('reCAPTCHA expired');
            }
          });
          
          // Render the reCAPTCHA
          window.recaptchaVerifier.render();
        } catch (error) {
          console.error('Error initializing reCAPTCHA:', error);
          }
      }, 100);
    } else {
      // Cleanup when modal closes
      if (window.recaptchaVerifier) {
          window.recaptchaVerifier.clear();
        window.recaptchaVerifier = null;
      }
    }
  }, [showOtpModal, auth]);

  // Auto-close modal and submit as unverified after 3 minutes if OTP was sent but not verified
  useEffect(() => {
    let timeoutId: NodeJS.Timeout;
    
    if (otpSent && !isVerified && !isOtpVerifying) {
      timeoutId = setTimeout(async () => {
        console.log('Auto-closing modal and submitting as unverified after timeout');
        await handleModalClose();
      }, 180000); // 3 minutes
    }

    return () => {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    };
  }, [otpSent, isVerified, isOtpVerifying]);

  const handleSendOtp = async () => {
    try {
      if (!window.recaptchaVerifier) {
        alert('reCAPTCHA not initialized. Please try again.');
      return;
    }

      const formattedPhoneNumber = `+91${formData.phone.replace(/\D/g, "")}`;
      console.log('Sending OTP to:', formattedPhoneNumber);
      console.log('Auth instance:', auth);
      console.log('reCAPTCHA verifier:', window.recaptchaVerifier);
      
      const confirmation = await signInWithPhoneNumber(auth, formattedPhoneNumber, window.recaptchaVerifier);
      setConfirmationResult(confirmation);
      setOtpSent(true);
      alert('OTP has been sent to your phone number');
    } catch (error: any) {
      console.error('Error sending OTP:', error);
      console.error('Error code:', error.code);
      console.error('Error message:', error.message);
      
      if (error.code === 'auth/invalid-app-credential') {
        alert('Firebase configuration error. Please check your Firebase settings and authorized domains.');
      } else {
        alert('Error sending OTP. Please try again. Make sure you complete the reCAPTCHA.');
        }
      }
  };

  const handleOtpSubmit = async () => {
    if (!otp || otp.length !== 6) {
      alert('Please enter a valid 6-digit OTP');
      return;
    }
    
    if (!confirmationResult) {
      alert('No confirmation result available. Please try again.');
      return;
    }

    setIsOtpVerifying(true);
    try {
      await confirmationResult.confirm(otp);
      setIsVerified(true);
      setOtp('');
      alert('Phone number verified successfully! Now submitting your form...');
      setOtpSent(false);
      setConfirmationResult(null);
      // Don't close the modal yet, let the user see the "Submit Form" button
    } catch (error) {
      console.error('Error verifying OTP:', error);
      alert('Invalid OTP. Please try again.');
      // After wrong OTP, give user option to try again or close modal
      const shouldClose = window.confirm('Invalid OTP. Would you like to try again or close and submit as unverified?');
      if (!shouldClose) {
        await handleModalClose();
      }
    } finally {
      setIsOtpVerifying(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log('Form submitted with data:', {
      name: formData.name,
      email: formData.email,
      phone: formData.phone,
      city: selectedCity,
      budget: selectedBudget,
      pincode: selectedPincode,
      whatsappConsent: whatsappConsent
    });

    if (!selectedCity || !selectedBudget || !selectedPincode || !whatsappConsent || !formData.name || !formData.email || !formData.phone) {
      alert("Please fill out all required fields.");
      return;
    }

    // Show OTP modal instead of submitting directly
    setShowOtpModal(true);
  };

  // Function to handle modal close and auto-submit as unverified
  const handleModalClose = async () => {
    if (otpSent && !isVerified) {
      // User started OTP process but didn't complete it - submit as unverified
      console.log('Modal closed with unverified OTP - submitting as unverified');
      await handleFinalSubmit();
    } else if (!otpSent) {
      // User never clicked "Send OTP" - submit as unverified
      console.log('Modal closed without sending OTP - submitting as unverified');
      await handleFinalSubmit();
    }
    
    setShowOtpModal(false);
    setOtpSent(false);
    setOtp('');
    setConfirmationResult(null);
    setIsVerified(false);
  };

  const handleFinalSubmit = async () => {
    console.log('handleFinalSubmit called');
    console.log('isVerified:', isVerified);
    console.log('formData:', formData);
    console.log('selectedCity:', selectedCity);
    console.log('selectedBudget:', selectedBudget);
    console.log('selectedPincode:', selectedPincode);
    
    setIsSubmitting(true);
    setSubmitStatus('');

    try {
      const currentUrl = window.location.href;
      const requestData = {
        name: formData.name,
        email: formData.email,
        phone: formData.phone,
        city: selectedCity,
        budget: selectedBudget,
        pincode: selectedPincode,
        whatsappConsent: whatsappConsent,
        pageUrl: currentUrl,
        verificationStatus: isVerified ? 'Verified User' : 'Unverified User'
      };

      console.log('Sending data to API:', requestData);

      // Add timeout to prevent hanging
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout

      const response = await fetch('/api/contact', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
        signal: controller.signal,
      });

      clearTimeout(timeoutId);
      console.log('API response status:', response.status);

      const responseData = await response.json();
      console.log('API response data:', responseData);

      if (response.ok && responseData.success) {
        setSubmitStatus('success');
        alert('Form submitted successfully! We will contact you soon.');
        // Reset form
        setSelectedCity("");
        setSelectedBudget("");
        setSelectedPincode("");
        setWhatsappConsent(true);
        setFormData({ name: '', email: '', phone: '' });
        setIsVerified(false);
        setShowOtpModal(false);
      } else {
        setSubmitStatus('error');
        alert(responseData.message || 'Failed to submit form. Please try again.');
      }
    } catch (error: any) {
      console.error('Error submitting form:', error);
      setSubmitStatus('error');
      
      if (error.name === 'AbortError') {
        alert('Request timed out. Please check your internet connection and try again.');
      } else {
        alert('Failed to submit form. Please try again.');
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div>
      <form onSubmit={handleSubmit}>
        
        {/* ===== MOBILE VERSION ===== */}
        <div className="block lg:hidden">
          {/* Mobile Hero Section */}
          <div className="relative w-full h-[370px] sm:h-[420px] mb-0">
            {/* Background image */}
            <img src="https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//1.png" alt="Hero" className="absolute inset-0 w-full h-full object-cover rounded-b-3xl" />
            {/* Overlay */}
          <div className="absolute inset-0 bg-black bg-opacity-60 rounded-b-3xl"></div>
            {/* Logo and Button Row */}
          <div className="absolute top-4 left-4 right-4 flex items-center justify-between z-10">
            <img src="/hub.png" alt="Logo" className="h-[38px]" />
            <button type="button" className="bg-[#DDCDC1] text-amber-950 rounded-full px-5 py-2 text-sm font-semibold shadow-md">GET FREE QUOTE</button>
          </div>
            <img src="https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//1.png" alt="Hero" className="absolute inset-0 w-full h-full object-cover rounded-b-3xl" />

            {/* Centered Heading and Subheading */}
          <div className="absolute inset-0 flex flex-col items-center justify-center text-center px-4 z-10">
            <h1 className="text-white text-4xl font-bold leading-tight mb-2 drop-shadow-lg">Best Interior<br/>Designers</h1>
            <p className="text-white text-base font-medium drop-shadow mb-2">Transforming Bangalore homes with personalized<br/>interiors that reflect your lifestyle.</p>
          </div>
        </div>

        {/* Mobile Form Card */}
          <div className="relative z-20 -mt-10 px-2">
            <div className="bg-white w-full rounded-3xl shadow-2xl pt-8 pb-4 px-3 ">
            <div className="text-2xl font-semibold text-center mb-6 text-amber-950">Interiors For Every Budget</div>
            
              {/* Name and Email Row */}
            <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center">
              <input 
                type="text" 
                name="name" 
                  value={formData.name}
                  onChange={handleInputChange}
                placeholder="Name" 
                required 
                className="w-full sm:w-[250px] h-[50px] bg-[#f1f2f6] mt-4 sm:mt-12 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
              />
              <input 
                type="email" 
                name="email" 
                  value={formData.email}
                  onChange={handleInputChange}
                placeholder="Email" 
                required 
                className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-4 sm:mt-12 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
              />
            </div>

              {/* Phone and Pincode Row */}
              <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center">
                <input 
                  type="tel" 
                  name="phone" 
                  value={formData.phone}
                  onChange={handleInputChange}
                  placeholder="Phone Number" 
                  required 
                  className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-6 sm:mt-10 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
                />
                {/* Pincode Dropdown */}
                <div className="relative w-full sm:w-[250px] mt-4 sm:mt-10">
                <select
                  name="pincode"
                  required
                  value={selectedPincode}
                  onChange={e => setSelectedPincode(e.target.value)}
                  className="w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] pl-6 sm:pl-8 pr-10 lg:pr-16 text-gray-400 appearance-none cursor-pointer"
                >
                  <option className="text-gray-400" value="" disabled>Property Pincode</option>
                  {Pincode.map((pin, idx) => (
                    <option key={idx} value={pin}>{pin}</option>
                  ))}
                </select>
                  {/* Custom dropdown arrow icon */}
                <span className="text-gray-500 mt-3 -ml-6 text-[18px] absolute">&#9662;</span>
              </div>
            </div>

            {/* City and Budget Dropdowns */}
            <div className="relative w-full sm:w-[520px] mx-auto mt-6 sm:mt-10 space-y-4 sm:space-y-6">
                {/* City Dropdown */}
                <div className="relative w-full sm:w-[520px] mx-auto">
                  <select
                    name="city"
                    required
                    value={selectedCity}
                    onChange={e => setSelectedCity(e.target.value)}
                    className="w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] pl-6 sm:pl-8 pr-10 lg:pr-16 text-gray-400 appearance-none cursor-pointer"
                  >
                    <option className="text-gray-400" value="" disabled>Choose Interior Setup</option>
                    {cityOptions.map((option: string) => (
                      <option key={option} value={option}>{option}</option>
                    ))}
                  </select>
                  {/* Custom dropdown arrow icon */}
                  <span className="text-gray-500 mt-3 -ml-6 text-[18px] absolute">&#9662;</span>
                </div>
                {/* Budget Dropdown */}
                <div className="relative w-full sm:w-[520px] mx-auto mt-6 sm:mt-10">
                  <select
                    name="budget"
                    required
                    value={selectedBudget}
                    onChange={e => setSelectedBudget(e.target.value)}
                    className="w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] pl-6 sm:pl-8 pr-10 lg:pr-16 text-gray-400 appearance-none cursor-pointer"
                  >
                    <option className="text-gray-400" value="" disabled>Possession In</option>
                    {budgetOptions.map((option: string) => (
                      <option key={option} value={option}>{option}</option>
                    ))}
                  </select>
                  {/* Custom dropdown arrow icon */}
                  <span className="text-gray-500 mt-3 -ml-6 text-[18px] absolute">&#9662;</span>
              </div>
            </div>

            {/* Checkbox and Button Container */}
            <div className="flex flex-col items-start mt-6 sm:mt-8 gap-3">
                {/* WhatsApp Checkbox */}
              <div className="flex items-center w-full sm:w-auto justify-start mb-3 lg:mb-0 lg:ml-2">
                <input
                  type="checkbox"
                  required
                  checked={whatsappConsent}
                  onChange={() => setWhatsappConsent(!whatsappConsent)}
                  className="size-4 sm:size-5 accent-[#DDCDC1] flex-shrink-0"
                />
                <label className="text-sm sm:text-[16px] font-light ml-2 sm:ml-6 whitespace-normal break-words">
                  Send Me Updates On WhatsApp
                </label>
              </div>
                {/* Submit Button */}
              <button
                type="submit"
                  disabled={isSubmitting}
                  className="flex w-[180px] sm:w-[200px] h-[45px] sm:h-[50px] bg-[#DDCDC1] rounded-3xl lg:rounded-4xl text-xl sm:text-2xl lg:text-[24px] font-medium justify-center items-center lg:mt-2 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                  <p>{isSubmitting ? 'Sending...' : 'Submit'}</p>
                  {!isSubmitting && (
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="size-5 sm:size-6 lg:size-7 ml-2">
                  <path strokeLinecap="round" strokeLinejoin="round" d="m12.75 15 3-3m0 0-3-3m3 3h-7.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                </svg>
                  )}
              </button>
            </div>

              {/* Success/Error Messages */}
              {submitStatus === 'success' && (
                <div className="text-green-600 text-center text-sm mt-4 font-medium">
                  Thank you! We'll get back to you soon.
                </div>
              )}
              
              {submitStatus === 'error' && (
                <div className="text-red-600 text-center text-sm mt-4 font-medium">
                  Something went wrong. Please try again.
                </div>
              )}
              
              {/* Legal Text */}
            <div className="text-xs sm:text-sm lg:text-[14px] mt-4 sm:mt-6 font-medium text-center sm:text-left mr-0 sm:mr-26 lg:ml-2">
              By Submitting This Form, You Agree To The{" "}
              <span className="text-[#DDCDC1]">Privacy Policy</span> &{" "}
              <span className="text-[#DDCDC1]">Terms & Conditions</span>
              </div>
            </div>
          </div>
        </div>

        {/* ===== DESKTOP VERSION ===== */}
        <div className="hidden lg:block bg-[#f1f2f6] min-h-screen p-4 sm:p-6">
          <div className="flex flex-col lg:flex-row gap-6 max-w-7xl mx-auto lg:mr-30">
            {/* Left side - Form */}
            <div className="w-full lg:w-auto">
              <div className="flex justify-center lg:justify-start">
                <img src="/hub.png" alt="Logo" className="h-[40px] sm:h-[50px] lg:h-[60px] mt-2" />
              </div>
              <div className="bg-white w-full lg:min-w-[570px] h-auto lg:h-[670px] mt-6 lg:mt-12 rounded-3xl lg:rounded-4xl text-2xl sm:text-3xl lg:text-4xl font-semibold text-center p-6 sm:p-8 lg:p-10 shadow-2xl">
                <p className="lg:mr-20 mb-6 lg:mb-0">Interiors For Every Budget</p>
                
                {/* Name and Email Row */}
                <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center">
                  <input 
                    type="text" 
                    name="name" 
                    value={formData.name}
                    onChange={handleInputChange}
                    placeholder="Name" 
                    required 
                    className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-4 sm:mt-12 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
                  />
                  <input 
                    type="email" 
                    name="email" 
                    value={formData.email}
                    onChange={handleInputChange}
                    placeholder="Email" 
                    required 
                    className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-4 sm:mt-12 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
                  />
                </div>

                {/* Phone and Pincode Row */}
                <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center">
                  <input 
                    type="tel" 
                    name="phone" 
                    value={formData.phone}
                    onChange={handleInputChange}
                    placeholder="Phone Number" 
                    required 
                    className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-6 sm:mt-10 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
                  />
                  {/* Pincode Dropdown */}
                  <div className="relative w-full sm:w-[250px] mt-4 sm:mt-10">
                    <select
                      name="pincode"
                      required
                      value={selectedPincode}
                      onChange={e => setSelectedPincode(e.target.value)}
                      className="w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] pl-6 sm:pl-8 pr-10 lg:pr-16 text-gray-400 appearance-none cursor-pointer"
                    >
                      <option className="text-gray-400" value="" disabled>Property Pincode</option>
                      {Pincode.map((pin, idx) => (
                        <option key={idx} value={pin}>{pin}</option>
                      ))}
                    </select>
                    {/* Custom dropdown arrow icon */}
                    <span className="text-gray-500 absolute mt-4 -ml-8 text-[16px]">&#9662;</span>
                  </div>
                </div>

                {/* Desktop Custom Dropdowns */}
                <div className="relative w-full sm:w-[520px] mx-auto mt-6 sm:mt-10 space-y-4 sm:space-y-6">
                  {/* City Dropdown */}
                  <div ref={cityRef}>
                    <div
                      onClick={() => {
                        setCityOpen(!cityOpen);
                        setBudgetOpen(false);
                      }}
                      className={`w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] flex items-center justify-between px-4 sm:px-6 cursor-pointer ${!selectedCity && 'text-gray-400'}`}
                    >
                      <span className="truncate">
                        {selectedCity || "Choose Interior Setup"}
                      </span>
                      <span className="text-gray-500">&#9662;</span>
                    </div>
                    {cityOpen && (
                      <ul className="absolute top-[60px] left-0 w-full bg-white border border-gray-300 rounded-xl lg:rounded-2xl shadow-lg z-[9999] text-left max-h-60 overflow-y-auto font-medium">
                        {cityOptions.map((option: string) => (
                          <li
                            key={option}
                            onClick={() => handleCitySelect(option)}
                            className="px-4 sm:px-6 py-2 hover:bg-gray-100 cursor-pointer text-gray-700 text-xs sm:text-sm"
                          >
                            {option}
                          </li>
                        ))}
                      </ul>
                    )}
                  </div>

                  {/* Budget Dropdown */}
                  <div ref={budgetRef}>
                    <div
                      onClick={() => {
                        setBudgetOpen(!budgetOpen);
                        setCityOpen(false);
                      }}
                      className={`w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] mt-6 sm:mt-10 flex items-center justify-between px-4 sm:px-6 cursor-pointer ${!selectedBudget && 'text-gray-400'}`}
                    >
                      <span>
                        {selectedBudget || "Possession In"}
                      </span>
                      <span className="text-gray-500">&#9662;</span>
                    </div>
                    {budgetOpen && (
                      <ul className="absolute top-[60px] left-0 w-full bg-white border border-gray-300 rounded-xl lg:rounded-2xl shadow-lg z-[9999] text-left max-h-60 overflow-y-auto font-medium">
                        {budgetOptions.map((option: string) => (
                          <li
                            key={option}
                            onClick={() => handleBudgetSelect(option)}
                            className="px-4 sm:px-6 py-2 hover:bg-gray-100 cursor-pointer text-gray-700 text-xs sm:text-sm"
                          >
                            {option}
                          </li>
                        ))}
                      </ul>
                    )}
                  </div>
                </div>

                {/* Checkbox and Button Container */}
                <div className=" sm:flex-row items-center justify-between mt-6 sm:mt-8 gap-4">
                  {/* WhatsApp Checkbox */}
                  <div className="flex items-center w-full sm:w-auto justify-center sm:justify-start lg:ml-2">
                    <input
                      type="checkbox"
                      required
                      checked={whatsappConsent}
                      onChange={() => setWhatsappConsent(!whatsappConsent)}
                      className="size-4 sm:size-5 accent-[#DDCDC1] flex-shrink-0"
                    />
                    <label className="text-sm sm:text-[16px] font-light ml-2 sm:ml-3 whitespace-nowrap">
                      Send Me Updates On WhatsApp
                    </label>
                  </div>
                  {/* Submit Button */}
                  <button
                    type="submit"
                    disabled={isSubmitting}
                    className="flex w-[180px] sm:w-[200px] h-[45px] sm:h-[50px] bg-[#DDCDC1] rounded-3xl lg:rounded-4xl text-xl sm:text-2xl lg:text-[24px] font-medium justify-center items-center lg:mt-8 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <p>{isSubmitting ? 'Sending...' : 'Submit'}</p>
                    {!isSubmitting && (
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="size-5 sm:size-6 lg:size-7 ml-2">
                      <path strokeLinecap="round" strokeLinejoin="round" d="m12.75 15 3-3m0 0-3-3m3 3h-7.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                    </svg>
                    )}
                  </button>
                </div>

                {/* Success/Error Messages */}
                {submitStatus === 'success' && (
                  <div className="text-green-600 text-center text-sm mt-4 font-medium">
                    Thank you! We'll get back to you soon.
                  </div>
                )}
                
                {submitStatus === 'error' && (
                  <div className="text-red-600 text-center text-sm mt-4 font-medium">
                    Something went wrong. Please try again.
                  </div>
                )}
                
                {/* Legal Text */}
                <div className="text-xs sm:text-sm lg:text-[14px] mt-4 sm:mt-6 font-medium text-center sm:text-left mr-0 sm:mr-26 lg:ml-2">
                  By Submitting This Form, You Agree To The{" "}
                  <span className="text-[#DDCDC1]">Privacy Policy</span> &{" "}
                  <span className="text-[#DDCDC1]">Terms & Conditions</span>
                </div>
              </div>
            </div>

            {/* Right side - Image/Placeholder */}
            <div className="hidden lg:block min-w-[400px] lg:min-w-[750px] h-[500px] lg:h-[785px] rounded-r-3xl lg:rounded-r-4xl relative overflow-hidden">
              {/* Carousel Image */}
              <img
                className="min-w-[400px] lg:min-w-[750px] h-[500px] lg:h-[785px] rounded-r-3xl lg:rounded-r-4xl object-cover transition-all duration-500"
                src={carouselImages[carouselIndex]}
                alt={`Carousel ${carouselIndex + 1}`}
              />
              {/* Overlayed Headings and Button */}
              <div className="absolute left-10 bottom-10 text-left z-10">
                <h1 className="text-white text-6xl font-bold leading-tight mb-0 drop-shadow-lg">Best Interior<p className="mb-1">Designers</p></h1>
                <p className="text-white text-xl font-medium drop-shadow mb-2">Transforming Bangalore homes with personalized<br/>interiors that reflect your lifestyle.</p>
              </div>
              <div className="w-[200px] h-[50px] bg-[#DDCDC1] rounded-4xl text-center py-3 font-bold absolute -mt-190 ml-132 tracking-wider text-[18px] z-20"> GET FREE QUOTE</div>
            </div>
          </div>
        </div>
      </form>

      {/* OTP Modal */}
      {showOtpModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[9999] p-4">
          <div className="bg-white rounded-2xl p-6 w-full max-w-md">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-semibold text-gray-800">Phone Verification</h3>
              <button
                onClick={handleModalClose}
                className="text-gray-500 hover:text-gray-700"
              >
                ✕
              </button>
            </div>

            {!otpSent ? (
              <div>
                <p className="text-gray-600 mb-4">
                  Please verify your phone number to continue. We'll send an OTP to {formData.phone}
                </p>
                <div id="recaptcha-container" className="mb-4"></div>
                <button
                  onClick={handleSendOtp}
                  className="w-full bg-[#DDCDC1] text-amber-950 py-3 rounded-xl font-semibold hover:bg-[#c4b5a8] transition-colors"
                >
                  Send OTP
                </button>
              </div>
            ) : (
              <div>
                <p className="text-gray-600 mb-4">
                  Enter the 6-digit OTP sent to {formData.phone}
                </p>
                <input
                  type="text"
                  value={otp}
                  onChange={(e) => setOtp(e.target.value)}
                  placeholder="Enter 6-digit OTP"
                  maxLength={6}
                  className="w-full border border-gray-300 rounded-xl p-3 mb-4 text-center text-lg font-medium"
                />
                <div className="flex gap-3">
                  <button
                    onClick={handleOtpSubmit}
                    disabled={isOtpVerifying || otp.length !== 6}
                    className="flex-1 bg-[#DDCDC1] text-amber-950 py-3 rounded-xl font-semibold hover:bg-[#c4b5a8] transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isOtpVerifying ? 'Verifying...' : 'Verify OTP'}
                  </button>
                  <button
                    onClick={handleSendOtp}
                    className="flex-1 bg-gray-200 text-gray-700 py-3 rounded-xl font-semibold hover:bg-gray-300 transition-colors"
                  >
                    Resend
                  </button>
                </div>
              </div>
            )}

            {isVerified && (
              <div className="mt-4">
                <button
                  onClick={handleFinalSubmit}
                  disabled={isSubmitting}
                  className="w-full bg-green-500 text-white py-3 rounded-xl font-semibold hover:bg-green-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isSubmitting ? 'Sending...' : 'Submit Form (Verified)'}
                </button>
              </div>
            )}


          </div>
        </div>
      )}
    </div>
  );
}


////


'use client';

import { useEffect, useRef, useState } from "react";
import {Pincode} from "./Pincode"
import cityOptions from "./DropDown1"
import {budgetOptions} from "./DropDown2"
import { getAuth, RecaptchaVerifier, signInWithPhoneNumber, ConfirmationResult } from "firebase/auth";
import { app } from '../../config';

declare global {
  interface Window {
    recaptchaVerifier?: any;
  }
}

const carouselImages = [
  "https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//3.png",
  "https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//1.png",
  "https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//2.png",
  "https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//3.png",
  "https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//4.png",
];

export default function HeroSections() {
  const [cityOpen, setCityOpen] = useState(false);
  const [budgetOpen, setBudgetOpen] = useState(false);
  const [selectedCity, setSelectedCity] = useState("");
  const [selectedBudget, setSelectedBudget] = useState("");
  const [selectedPincode, setSelectedPincode] = useState("");
  const [whatsappConsent, setWhatsappConsent] = useState(true);
  const [carouselIndex, setCarouselIndex] = useState(0);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState('');

  // OTP States
  const [showOtpModal, setShowOtpModal] = useState(false);
  const [otp, setOtp] = useState('');
  const [confirmationResult, setConfirmationResult] = useState<ConfirmationResult | null>(null);
  const [otpSent, setOtpSent] = useState(false);
  const [isOtpVerifying, setIsOtpVerifying] = useState(false);
  const [isVerified, setIsVerified] = useState(false);
  const [recaptchaCompleted, setRecaptchaCompleted] = useState(false);

  // Add state for form fields
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: ''
  });

  const auth = getAuth(app);

  // Auto-slide effect
  useEffect(() => {
    const interval = setInterval(() => {
      setCarouselIndex((prev) => (prev === carouselImages.length - 1 ? 0 : prev + 1));
    }, 3000); // 3 seconds
    return () => clearInterval(interval);
  }, []);

  const cityRef = useRef<HTMLDivElement>(null);
  const budgetRef = useRef<HTMLDivElement>(null);


  const handleCitySelect = (value: string) => {
    console.log('City selected:', value);
    setSelectedCity(value);
    setTimeout(() => setCityOpen(false), 100);
  };

  const handleBudgetSelect = (value: string) => {
    console.log('Budget selected:', value);
    setSelectedBudget(value);
    setTimeout(() => setBudgetOpen(false), 100);
  };

  // const handlePrev = () => setCarouselIndex((prev) => (prev === 0 ? carouselImages.length - 1 : prev - 1));
  // const handleNext = () => setCarouselIndex((prev) => (prev === carouselImages.length - 1 ? 0 : prev + 1));

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      setTimeout(() => {
      if (cityRef.current && !cityRef.current.contains(event.target as Node)) {
        setCityOpen(false);
      }
      if (budgetRef.current && !budgetRef.current.contains(event.target as Node)) {
        setBudgetOpen(false);
      }
      }, 10);
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  // Initialize reCAPTCHA
  useEffect(() => {
    if (showOtpModal) {
      // Clear any existing reCAPTCHA
      if (window.recaptchaVerifier) {
          window.recaptchaVerifier.clear();
        window.recaptchaVerifier = null;
      }

      // Wait for DOM to be ready
      setTimeout(() => {
    try {
          window.recaptchaVerifier = new RecaptchaVerifier(auth, "recaptcha-container", {
            'size': 'normal',
            'callback': () => {
              console.log('reCAPTCHA verified');
              setRecaptchaCompleted(true);
            },
            'expired-callback': () => {
              console.log('reCAPTCHA expired');
              setRecaptchaCompleted(false);
            }
          });
          
          // Render the reCAPTCHA
          window.recaptchaVerifier.render();
        } catch (error) {
          console.error('Error initializing reCAPTCHA:', error);
          }
      }, 100);
    } else {
      // Cleanup when modal closes
      if (window.recaptchaVerifier) {
          window.recaptchaVerifier.clear();
        window.recaptchaVerifier = null;
      }
    }
  }, [showOtpModal, auth]);

  // Auto-close modal and submit as unverified after 3 minutes if OTP was sent but not verified
  useEffect(() => {
    let timeoutId: NodeJS.Timeout;
    
    if (otpSent && !isVerified && !isOtpVerifying) {
      timeoutId = setTimeout(async () => {
        console.log('Auto-closing modal and submitting as unverified after timeout');
        await handleModalClose();
      }, 180000); // 3 minutes
    }

    return () => {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    };
  }, [otpSent, isVerified, isOtpVerifying]);

  const handleSendOtp = async () => {
    try {
      if (!window.recaptchaVerifier) {
        alert('reCAPTCHA not initialized. Please try again.');
        return;
      }

      // Validate phone number
      if (!formData.phone || formData.phone.length < 10) {
        alert('Please enter a valid 10-digit phone number');
        return;
      }

      // Clean and format phone number
      const cleanedPhone = formData.phone.replace(/\D/g, "");
      if (cleanedPhone.length !== 10) {
        alert('Please enter a valid 10-digit phone number');
        return;
      }

      const formattedPhoneNumber = `+91${cleanedPhone}`;
      console.log('Sending OTP to:', formattedPhoneNumber);
      console.log('Auth instance:', auth);
      console.log('reCAPTCHA verifier:', window.recaptchaVerifier);
      
      // Check if reCAPTCHA is completed
      if (!recaptchaCompleted) {
        alert('Please complete the reCAPTCHA verification first.');
        return;
      }
      
      const confirmation = await signInWithPhoneNumber(auth, formattedPhoneNumber, window.recaptchaVerifier);
      setConfirmationResult(confirmation);
      setOtpSent(true);
      alert('OTP has been sent to your phone number');
    } catch (error: any) {
      console.error('Error sending OTP:', error);
      console.error('Error code:', error.code);
      console.error('Error message:', error.message);
      
      if (error.code === 'auth/invalid-app-credential') {
        alert('Firebase configuration error. Please check your Firebase settings and authorized domains.');
      } else if (error.code === 'auth/invalid-phone-number') {
        alert('Invalid phone number format. Please enter a valid 10-digit Indian phone number.');
      } else if (error.code === 'auth/too-many-requests') {
        alert('Too many OTP requests. Please wait a few minutes before trying again.');
      } else if (error.code === 'auth/invalid-recaptcha-token') {
        alert('reCAPTCHA verification failed. Please try again.');
      } else {
        alert('Error sending OTP. Please try again. Make sure you complete the reCAPTCHA.');
      }
    }
  };

  const handleOtpSubmit = async () => {
    if (!otp || otp.length !== 6) {
      alert('Please enter a valid 6-digit OTP');
      return;
    }
    
    if (!confirmationResult) {
      alert('No confirmation result available. Please try again.');
      return;
    }

    setIsOtpVerifying(true);
    try {
      await confirmationResult.confirm(otp);
      setIsVerified(true);
      setOtp('');
      alert('Phone number verified successfully! Now submitting your form...');
      setOtpSent(false);
      setConfirmationResult(null);
      // Don't close the modal yet, let the user see the "Submit Form" button
    } catch (error) {
      console.error('Error verifying OTP:', error);
      alert('Invalid OTP. Please try again.');
      // After wrong OTP, give user option to try again or close modal
      const shouldClose = window.confirm('Invalid OTP. Would you like to try again or close and submit as unverified?');
      if (!shouldClose) {
        await handleModalClose();
      }
    } finally {
      setIsOtpVerifying(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log('Form submitted with data:', {
      name: formData.name,
      email: formData.email,
      phone: formData.phone,
      city: selectedCity,
      budget: selectedBudget,
      pincode: selectedPincode,
      whatsappConsent: whatsappConsent
    });

    if (!selectedCity || !selectedBudget || !selectedPincode || !whatsappConsent || !formData.name || !formData.email || !formData.phone) {
      alert("Please fill out all required fields.");
      return;
    }

    // Submit form data immediately as unverified (without resetting form)
    console.log('Submitting form data immediately as unverified');
    await handleFinalSubmitWithoutReset('Unverified User');
    
    // Then show OTP modal for verification
    setShowOtpModal(true);
  };

  // Function to handle modal close and auto-submit as unverified
  const handleModalClose = async () => {
    if (otpSent && !isVerified) {
      // User started OTP process but didn't complete it - submit as unverified
      console.log('Modal closed with unverified OTP - submitting as unverified');
      await handleFinalSubmit('Unverified User');
    } else if (!otpSent) {
      // User never clicked "Send OTP" - submit as unverified
      console.log('Modal closed without sending OTP - submitting as unverified');
      await handleFinalSubmit('Unverified User');
    }
    
    setShowOtpModal(false);
    setOtpSent(false);
    setOtp('');
    setConfirmationResult(null);
    setIsVerified(false);
    setRecaptchaCompleted(false);
  };

  const handleFinalSubmitWithoutReset = async (verificationStatus = 'Unverified User') => {
    console.log('handleFinalSubmitWithoutReset called with status:', verificationStatus);
    console.log('formData:', formData);
    console.log('selectedCity:', selectedCity);
    console.log('selectedBudget:', selectedBudget);
    console.log('selectedPincode:', selectedPincode);
    
    setIsSubmitting(true);
    setSubmitStatus('');

    try {
      const currentUrl = window.location.href;
      const requestData = {
        name: formData.name,
        email: formData.email,
        phone: formData.phone,
        city: selectedCity,
        budget: selectedBudget,
        pincode: selectedPincode,
        whatsappConsent: whatsappConsent,
        pageUrl: currentUrl,
        verificationStatus: verificationStatus
      };

      console.log('Sending data to API:', requestData);

      // Add timeout to prevent hanging
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout

      const response = await fetch('/api/contact', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
        signal: controller.signal,
      });

      clearTimeout(timeoutId);
      console.log('API response status:', response.status);

      const responseData = await response.json();
      console.log('API response data:', responseData);

      if (response.ok && responseData.success) {
        setSubmitStatus('success');
        
        if (verificationStatus === 'Verified User') {
          alert('Form submitted successfully! We will contact you soon.');
        } else {
          alert('Form submitted! Please verify your phone number for faster response.');
        }
      } else {
        setSubmitStatus('error');
        alert(responseData.message || 'Failed to submit form. Please try again.');
      }
    } catch (error: any) {
      console.error('Error submitting form:', error);
      setSubmitStatus('error');
      
      if (error.name === 'AbortError') {
        alert('Request timed out. Please check your internet connection and try again.');
      } else {
        alert('Failed to submit form. Please try again.');
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleFinalSubmit = async (verificationStatus = 'Unverified User') => {
    console.log('handleFinalSubmit called with status:', verificationStatus);
    console.log('formData:', formData);
    console.log('selectedCity:', selectedCity);
    console.log('selectedBudget:', selectedBudget);
    console.log('selectedPincode:', selectedPincode);
    
    setIsSubmitting(true);
    setSubmitStatus('');

    try {
      const currentUrl = window.location.href;
      const requestData = {
        name: formData.name,
        email: formData.email,
        phone: formData.phone,
        city: selectedCity,
        budget: selectedBudget,
        pincode: selectedPincode,
        whatsappConsent: whatsappConsent,
        pageUrl: currentUrl,
        verificationStatus: verificationStatus
      };

      console.log('Sending data to API:', requestData);

      // Add timeout to prevent hanging
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout

      const response = await fetch('/api/contact', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
        signal: controller.signal,
      });

      clearTimeout(timeoutId);
      console.log('API response status:', response.status);

      const responseData = await response.json();
      console.log('API response data:', responseData);

      if (response.ok && responseData.success) {
        setSubmitStatus('success');
        
        if (verificationStatus === 'Verified User') {
          alert('Form submitted successfully! We will contact you soon.');
        } else {
          alert('Form submitted! Please verify your phone number for faster response.');
        }
        
        // Reset form
        setSelectedCity("");
        setSelectedBudget("");
        setSelectedPincode("");
        setWhatsappConsent(true);
        setFormData({ name: '', email: '', phone: '' });
        setIsVerified(false);
        setShowOtpModal(false);
      } else {
        setSubmitStatus('error');
        alert(responseData.message || 'Failed to submit form. Please try again.');
      }
    } catch (error: any) {
      console.error('Error submitting form:', error);
      setSubmitStatus('error');
      
      if (error.name === 'AbortError') {
        alert('Request timed out. Please check your internet connection and try again.');
      } else {
        alert('Failed to submit form. Please try again.');
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div>
      <form onSubmit={handleSubmit}>
        
        {/* ===== MOBILE VERSION ===== */}
        <div className="block lg:hidden">
          {/* Mobile Hero Section */}
          <div className="relative w-full h-[370px] sm:h-[420px] mb-0">
            {/* Background image */}
            <img src="https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//1.png" alt="Hero" className="absolute inset-0 w-full h-full object-cover rounded-b-3xl" />
            {/* Overlay */}
          <div className="absolute inset-0 bg-black bg-opacity-60 rounded-b-3xl"></div>
            {/* Logo and Button Row */}
          <div className="absolute top-4 left-4 right-4 flex items-center justify-between z-10">
            <img src="/hub.png" alt="Logo" className="h-[38px]" />
            <button type="button" className="bg-[#DDCDC1] text-amber-950 rounded-full px-5 py-2 text-sm font-semibold shadow-md">GET FREE QUOTE</button>
          </div>
            <img src="https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//1.png" alt="Hero" className="absolute inset-0 w-full h-full object-cover rounded-b-3xl" />

            {/* Centered Heading and Subheading */}
          <div className="absolute inset-0 flex flex-col items-center justify-center text-center px-4 z-10">
            <h1 className="text-white text-4xl font-bold leading-tight mb-2 drop-shadow-lg">Best Interior<br/>Designers</h1>
            <p className="text-white text-base font-medium drop-shadow mb-2">Transforming Bangalore homes with personalized<br/>interiors that reflect your lifestyle.</p>
          </div>
        </div>

        {/* Mobile Form Card */}
          <div className="relative z-20 -mt-10 px-2">
            <div className="bg-white w-full rounded-3xl shadow-2xl pt-8 pb-4 px-3 ">
            <div className="text-2xl font-semibold text-center mb-6 text-amber-950">Interiors For Every Budget</div>
            
              {/* Name and Email Row */}
            <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center">
              <input 
                type="text" 
                name="name" 
                  value={formData.name}
                  onChange={handleInputChange}
                placeholder="Name" 
                required 
                className="w-full sm:w-[250px] h-[50px] bg-[#f1f2f6] mt-4 sm:mt-12 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
              />
              <input 
                type="email" 
                name="email" 
                  value={formData.email}
                  onChange={handleInputChange}
                placeholder="Email" 
                required 
                className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-4 sm:mt-12 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
              />
            </div>

              {/* Phone and Pincode Row */}
              <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center">
                <input 
                  type="tel" 
                  name="phone" 
                  value={formData.phone}
                  onChange={handleInputChange}
                  placeholder="Phone Number" 
                  required 
                  className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-6 sm:mt-10 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
                />
                {/* Pincode Dropdown */}
                <div className="relative w-full sm:w-[250px] mt-4 sm:mt-10">
                <select
                  name="pincode"
                  required
                  value={selectedPincode}
                  onChange={e => setSelectedPincode(e.target.value)}
                  className="w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] pl-6 sm:pl-8 pr-10 lg:pr-16 text-gray-400 appearance-none cursor-pointer"
                >
                  <option className="text-gray-400" value="" disabled>Property Pincode</option>
                  {Pincode.map((pin, idx) => (
                    <option key={idx} value={pin}>{pin}</option>
                  ))}
                </select>
                  {/* Custom dropdown arrow icon */}
                <span className="text-gray-500 mt-3 -ml-6 text-[18px] absolute">&#9662;</span>
              </div>
            </div>

            {/* City and Budget Dropdowns */}
            <div className="relative w-full sm:w-[520px] mx-auto mt-6 sm:mt-10 space-y-4 sm:space-y-6">
                {/* City Dropdown */}
                <div className="relative w-full sm:w-[520px] mx-auto">
                  <select
                    name="city"
                    required
                    value={selectedCity}
                    onChange={e => setSelectedCity(e.target.value)}
                    className="w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] pl-6 sm:pl-8 pr-10 lg:pr-16 text-gray-400 appearance-none cursor-pointer"
                  >
                    <option className="text-gray-400" value="" disabled>Choose Interior Setup</option>
                    {cityOptions.map((option: string) => (
                      <option key={option} value={option}>{option}</option>
                    ))}
                  </select>
                  {/* Custom dropdown arrow icon */}
                  <span className="text-gray-500 mt-3 -ml-6 text-[18px] absolute">&#9662;</span>
                </div>
                {/* Budget Dropdown */}
                <div className="relative w-full sm:w-[520px] mx-auto mt-6 sm:mt-10">
                  <select
                    name="budget"
                    required
                    value={selectedBudget}
                    onChange={e => setSelectedBudget(e.target.value)}
                    className="w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] pl-6 sm:pl-8 pr-10 lg:pr-16 text-gray-400 appearance-none cursor-pointer"
                  >
                    <option className="text-gray-400" value="" disabled>Possession In</option>
                    {budgetOptions.map((option: string) => (
                      <option key={option} value={option}>{option}</option>
                    ))}
                  </select>
                  {/* Custom dropdown arrow icon */}
                  <span className="text-gray-500 mt-3 -ml-6 text-[18px] absolute">&#9662;</span>
              </div>
            </div>

            {/* Checkbox and Button Container */}
            <div className="flex flex-col items-start mt-6 sm:mt-8 gap-3">
                {/* WhatsApp Checkbox */}
              <div className="flex items-center w-full sm:w-auto justify-start mb-3 lg:mb-0 lg:ml-2">
                <input
                  type="checkbox"
                  required
                  checked={whatsappConsent}
                  onChange={() => setWhatsappConsent(!whatsappConsent)}
                  className="size-4 sm:size-5 accent-[#DDCDC1] flex-shrink-0"
                />
                <label className="text-sm sm:text-[16px] font-light ml-2 sm:ml-6 whitespace-normal break-words">
                  Send Me Updates On WhatsApp
                </label>
              </div>
                {/* Submit Button */}
              <button
                type="submit"
                  disabled={isSubmitting}
                  className="flex w-[180px] sm:w-[200px] h-[45px] sm:h-[50px] bg-[#DDCDC1] rounded-3xl lg:rounded-4xl text-xl sm:text-2xl lg:text-[24px] font-medium justify-center items-center lg:mt-2 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                  <p>{isSubmitting ? 'Sending...' : 'Submit'}</p>
                  {!isSubmitting && (
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="size-5 sm:size-6 lg:size-7 ml-2">
                  <path strokeLinecap="round" strokeLinejoin="round" d="m12.75 15 3-3m0 0-3-3m3 3h-7.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                </svg>
                  )}
              </button>
            </div>

              {/* Success/Error Messages */}
              {submitStatus === 'success' && (
                <div className="text-green-600 text-center text-sm mt-4 font-medium">
                  Thank you! We'll get back to you soon.
                </div>
              )}
              
              {submitStatus === 'error' && (
                <div className="text-red-600 text-center text-sm mt-4 font-medium">
                  Something went wrong. Please try again.
                </div>
              )}
              
              {/* Legal Text */}
            <div className="text-xs sm:text-sm lg:text-[14px] mt-4 sm:mt-6 font-medium text-center sm:text-left mr-0 sm:mr-26 lg:ml-2">
              By Submitting This Form, You Agree To The{" "}
              <span className="text-[#DDCDC1]">Privacy Policy</span> &{" "}
              <span className="text-[#DDCDC1]">Terms & Conditions</span>
              </div>
            </div>
          </div>
        </div>

        {/* ===== DESKTOP VERSION ===== */}
        <div className="hidden lg:block bg-[#f1f2f6] min-h-screen p-4 sm:p-6">
          <div className="flex flex-col lg:flex-row gap-6 max-w-7xl mx-auto lg:mr-30">
            {/* Left side - Form */}
            <div className="w-full lg:w-auto">
              <div className="flex justify-center lg:justify-start">
                <img src="/hub.png" alt="Logo" className="h-[40px] sm:h-[50px] lg:h-[60px] mt-2" />
              </div>
              <div className="bg-white w-full lg:min-w-[570px] h-auto lg:h-[670px] mt-6 lg:mt-12 rounded-3xl lg:rounded-4xl text-2xl sm:text-3xl lg:text-4xl font-semibold text-center p-6 sm:p-8 lg:p-10 shadow-2xl">
                <p className="lg:mr-20 mb-6 lg:mb-0">Interiors For Every Budget</p>
                
                {/* Name and Email Row */}
                <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center">
                  <input 
                    type="text" 
                    name="name" 
                    value={formData.name}
                    onChange={handleInputChange}
                    placeholder="Name" 
                    required 
                    className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-4 sm:mt-12 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
                  />
                  <input 
                    type="email" 
                    name="email" 
                    value={formData.email}
                    onChange={handleInputChange}
                    placeholder="Email" 
                    required 
                    className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-4 sm:mt-12 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
                  />
                </div>

                {/* Phone and Pincode Row */}
                <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center">
                  <input 
                    type="tel" 
                    name="phone" 
                    value={formData.phone}
                    onChange={handleInputChange}
                    placeholder="Phone Number" 
                    required 
                    className="w-full sm:w-[250px] h-[50px] bg-[#f2f2f6] mt-6 sm:mt-10 rounded-3xl lg:rounded-4xl text-base sm:text-lg pl-6 sm:pl-8 placeholder-gray-400 font-medium" 
                  />
                  {/* Pincode Dropdown */}
                  <div className="relative w-full sm:w-[250px] mt-4 sm:mt-10">
                    <select
                      name="pincode"
                      required
                      value={selectedPincode}
                      onChange={e => setSelectedPincode(e.target.value)}
                      className="w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] pl-6 sm:pl-8 pr-10 lg:pr-16 text-gray-400 appearance-none cursor-pointer"
                    >
                      <option className="text-gray-400" value="" disabled>Property Pincode</option>
                      {Pincode.map((pin, idx) => (
                        <option key={idx} value={pin}>{pin}</option>
                      ))}
                    </select>
                    {/* Custom dropdown arrow icon */}
                    <span className="text-gray-500 absolute mt-4 -ml-8 text-[16px]">&#9662;</span>
                  </div>
                </div>

                {/* Desktop Custom Dropdowns */}
                <div className="relative w-full sm:w-[520px] mx-auto mt-6 sm:mt-10 space-y-4 sm:space-y-6">
                  {/* City Dropdown */}
                  <div ref={cityRef}>
                    <div
                      onClick={() => {
                        setCityOpen(!cityOpen);
                        setBudgetOpen(false);
                      }}
                      className={`w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] flex items-center justify-between px-4 sm:px-6 cursor-pointer ${!selectedCity && 'text-gray-400'}`}
                    >
                      <span className="truncate">
                        {selectedCity || "Choose Interior Setup"}
                      </span>
                      <span className="text-gray-500">&#9662;</span>
                    </div>
                    {cityOpen && (
                      <ul className="absolute top-[60px] left-0 w-full bg-white border border-gray-300 rounded-xl lg:rounded-2xl shadow-lg z-[9999] text-left max-h-60 overflow-y-auto font-medium">
                        {cityOptions.map((option: string) => (
                          <li
                            key={option}
                            onClick={() => handleCitySelect(option)}
                            className="px-4 sm:px-6 py-2 hover:bg-gray-100 cursor-pointer text-gray-700 text-xs sm:text-sm"
                          >
                            {option}
                          </li>
                        ))}
                      </ul>
                    )}
                  </div>

                  {/* Budget Dropdown */}
                  <div ref={budgetRef}>
                    <div
                      onClick={() => {
                        setBudgetOpen(!budgetOpen);
                        setCityOpen(false);
                      }}
                      className={`w-full h-[50px] font-medium bg-[#f1f2f6] rounded-3xl lg:rounded-4xl text-base sm:text-[18px] mt-6 sm:mt-10 flex items-center justify-between px-4 sm:px-6 cursor-pointer ${!selectedBudget && 'text-gray-400'}`}
                    >
                      <span>
                        {selectedBudget || "Possession In"}
                      </span>
                      <span className="text-gray-500">&#9662;</span>
                    </div>
                    {budgetOpen && (
                      <ul className="absolute top-[60px] left-0 w-full bg-white border border-gray-300 rounded-xl lg:rounded-2xl shadow-lg z-[9999] text-left max-h-60 overflow-y-auto font-medium">
                        {budgetOptions.map((option: string) => (
                          <li
                            key={option}
                            onClick={() => handleBudgetSelect(option)}
                            className="px-4 sm:px-6 py-2 hover:bg-gray-100 cursor-pointer text-gray-700 text-xs sm:text-sm"
                          >
                            {option}
                          </li>
                        ))}
                      </ul>
                    )}
                  </div>
                </div>

                {/* Checkbox and Button Container */}
                <div className=" sm:flex-row items-center justify-between mt-6 sm:mt-8 gap-4">
                  {/* WhatsApp Checkbox */}
                  <div className="flex items-center w-full sm:w-auto justify-center sm:justify-start lg:ml-2">
                    <input
                      type="checkbox"
                      required
                      checked={whatsappConsent}
                      onChange={() => setWhatsappConsent(!whatsappConsent)}
                      className="size-4 sm:size-5 accent-[#DDCDC1] flex-shrink-0"
                    />
                    <label className="text-sm sm:text-[16px] font-light ml-2 sm:ml-3 whitespace-nowrap">
                      Send Me Updates On WhatsApp
                    </label>
                  </div>
                  {/* Submit Button */}
                  <button
                    type="submit"
                    disabled={isSubmitting}
                    className="flex w-[180px] sm:w-[200px] h-[45px] sm:h-[50px] bg-[#DDCDC1] rounded-3xl lg:rounded-4xl text-xl sm:text-2xl lg:text-[24px] font-medium justify-center items-center lg:mt-8 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <p>{isSubmitting ? 'Sending...' : 'Submit'}</p>
                    {!isSubmitting && (
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="size-5 sm:size-6 lg:size-7 ml-2">
                      <path strokeLinecap="round" strokeLinejoin="round" d="m12.75 15 3-3m0 0-3-3m3 3h-7.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                    </svg>
                    )}
                  </button>
                </div>

                {/* Success/Error Messages */}
                {submitStatus === 'success' && (
                  <div className="text-green-600 text-center text-sm mt-4 font-medium">
                    Thank you! We'll get back to you soon.
                  </div>
                )}
                
                {submitStatus === 'error' && (
                  <div className="text-red-600 text-center text-sm mt-4 font-medium">
                    Something went wrong. Please try again.
                  </div>
                )}
                
                {/* Legal Text */}
                <div className="text-xs sm:text-sm lg:text-[14px] mt-4 sm:mt-6 font-medium text-center sm:text-left mr-0 sm:mr-26 lg:ml-2">
                  By Submitting This Form, You Agree To The{" "}
                  <span className="text-[#DDCDC1]">Privacy Policy</span> &{" "}
                  <span className="text-[#DDCDC1]">Terms & Conditions</span>
                </div>
              </div>
            </div>

            {/* Right side - Image/Placeholder */}
            <div className="hidden lg:block min-w-[400px] lg:min-w-[750px] h-[500px] lg:h-[785px] rounded-r-3xl lg:rounded-r-4xl relative overflow-hidden">
              {/* Carousel Image */}
              <img
                className="min-w-[400px] lg:min-w-[750px] h-[500px] lg:h-[785px] rounded-r-3xl lg:rounded-r-4xl object-cover transition-all duration-500"
                src={carouselImages[carouselIndex]}
                alt={`Carousel ${carouselIndex + 1}`}
              />
              {/* Overlayed Headings and Button */}
              <div className="absolute left-10 bottom-10 text-left z-10">
                <h1 className="text-white text-6xl font-bold leading-tight mb-0 drop-shadow-lg">Best Interior<p className="mb-1">Designers</p></h1>
                <p className="text-white text-xl font-medium drop-shadow mb-2">Transforming Bangalore homes with personalized<br/>interiors that reflect your lifestyle.</p>
              </div>
              <div className="w-[200px] h-[50px] bg-[#DDCDC1] rounded-4xl text-center py-3 font-bold absolute -mt-190 ml-132 tracking-wider text-[18px] z-20"> GET FREE QUOTE</div>
            </div>
          </div>
        </div>
      </form>

      {/* OTP Modal */}
      {showOtpModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[9999] p-4">
          <div className="bg-white rounded-2xl p-6 w-full max-w-md">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-semibold text-gray-800">Phone Verification</h3>
              <button
                onClick={handleModalClose}
                className="text-gray-500 hover:text-gray-700"
              >
                ✕
              </button>
            </div>

            {!otpSent ? (
              <div>
                <p className="text-gray-600 mb-4">
                  Please verify your phone number to continue. We'll send an OTP to {formData.phone}
                </p>
                <div id="recaptcha-container" className="mb-4"></div>
                <button
                  onClick={handleSendOtp}
                  className="w-full bg-[#DDCDC1] text-amber-950 py-3 rounded-xl font-semibold hover:bg-[#c4b5a8] transition-colors"
                >
                  Send OTP
                </button>
              </div>
            ) : (
              <div>
                <p className="text-gray-600 mb-4">
                  Enter the 6-digit OTP sent to {formData.phone}
                </p>
                <input
                  type="text"
                  value={otp}
                  onChange={(e) => setOtp(e.target.value)}
                  placeholder="Enter 6-digit OTP"
                  maxLength={6}
                  className="w-full border border-gray-300 rounded-xl p-3 mb-4 text-center text-lg font-medium"
                />
                <div className="flex gap-3">
                  <button
                    onClick={handleOtpSubmit}
                    disabled={isOtpVerifying || otp.length !== 6}
                    className="flex-1 bg-[#DDCDC1] text-amber-950 py-3 rounded-xl font-semibold hover:bg-[#c4b5a8] transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isOtpVerifying ? 'Verifying...' : 'Verify OTP'}
                  </button>
                  <button
                    onClick={handleSendOtp}
                    className="flex-1 bg-gray-200 text-gray-700 py-3 rounded-xl font-semibold hover:bg-gray-300 transition-colors"
                  >
                    Resend
                  </button>
                </div>
              </div>
            )}

            {isVerified && (
              <div className="mt-4">
                <button
                  onClick={() => handleFinalSubmit('Verified User')}
                  disabled={isSubmitting}
                  className="w-full bg-green-500 text-white py-3 rounded-xl font-semibold hover:bg-green-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isSubmitting ? 'Sending...' : 'Submit Form (Verified)'}
                </button>
              </div>
            )}


          </div>
        </div>
      )}
    </div>
  );
}



// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
import { getAnalytics } from "firebase/analytics";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: "AIzaSyBTjEdu_92IopHAO-feHlPuP9cbqrwEjY0",
  authDomain: "hubotp-a2dac.firebaseapp.com",
  projectId: "hubotp-a2dac",
  storageBucket: "hubotp-a2dac.firebasestorage.app",
  messagingSenderId: "581708164901",
  appId: "1:581708164901:web:c369bc9f5ccd0835eb74cc",
  measurementId: "G-4GLDFLL8FH"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const analytics = getAnalytics(app);