
'use client';

import React, { useState, useRef } from 'react';
import Link from "next/link";
import Image from 'next/image';

export default function Section3() {
    const [currentSlide, setCurrentSlide] = useState(0);
    const [touchStart, setTouchStart] = useState<number | null>(null);
    const [touchEnd, setTouchEnd] = useState<number | null>(null);
    const carouselRef = useRef<HTMLDivElement>(null);
    
    const serviceCards = [
        {
            title: "Modular Interiors for Every Home",
            description: "Efficient layouts and space-saving designs crafted to fit kitchens, wardrobes, and storage — blending style with everyday functionality.",
            image: "https://tgqcnyhwjfretjmnlmaq.supabase.co/storage/v1/object/public/hubinteriors//Kitchen5.jpg",
            link: "/Services",
            borderColor: ""
        },
        {
            title: "End-to-End Interior Solutions", 
            description: "From concept to completion, we provide complete interior solutions — covering every room with design, execution, and finishing under one roof.",
            image: "/bed1.jpg",
            link: "/Services",
            borderColor: ""
        },
        {
            title: "Luxury Interiors Thoughtfully Crafted",
            description: "Luxury interiors thoughtfully built to balance modern design, comfort, and personal expression. elevating everyday lifestyle",
            image: "/bed4.jpg",
            link: "/Services",
            borderColor: ""
        },
    ];

    const nextSlide = () => {
        setCurrentSlide((prev) => {
            const totalSlides = Math.ceil(serviceCards.length / 3);
            return prev < totalSlides - 1 ? prev + 1 : prev;
        });
    };

    const prevSlide = () => {
        setCurrentSlide((prev) => Math.max(0, prev - 1));
    };

    // Touch event handlers for mobile swipe
    const handleTouchStart = (e: React.TouchEvent) => {
        setTouchEnd(null);
        setTouchStart(e.targetTouches[0].clientX);
    };

    const handleTouchMove = (e: React.TouchEvent) => {
        setTouchEnd(e.targetTouches[0].clientX);
    };

    const handleTouchEnd = () => {
        if (!touchStart || !touchEnd) return;
        
        const distance = touchStart - touchEnd;
        const isLeftSwipe = distance > 50;
        const isRightSwipe = distance < -50;

        if (isRightSwipe) {
            // Loop to first card if at last card
            setCurrentSlide(currentSlide === serviceCards.length - 1 ? 0 : currentSlide + 1);
        }
        if (isLeftSwipe) {
            // Loop to last card if at first card
            setCurrentSlide(currentSlide === 0 ? serviceCards.length - 1 : currentSlide - 1);
        }
    };

    return (
        <div>
            <style jsx>{`
        /* Hide both sections by default on mobile */
        .desktop-1440,
        .desktop-1280 {
          display: none;
        }

        /* Show 1280px section for screens between 768px and 1439px */
        @media (min-width: 768px) and (max-width: 1439px) {
          .desktop-1280 {
            display: block;
          }
        }

        /* Show 1440px section for screens 1440px and above */
        @media (min-width: 1440px) {
          .desktop-1440 {
            display: block;
          }
        }
      `}</style>
        <div className="desktop-1440 hidden md:block bg-[#F1F2F6] h-[1100px] pt-8 pb-20 px-8">
            <div className="max-w-7xl mx-auto">
                {/* Header Section */}
                <div className="flex flex-row justify-between items-center mb-12">
                    <h1 className="text-4xl wulkan-display-bold text-gray-800">All Interior Service, One Destination</h1>
                    <Link href="/ContactUs">
                        <button className="bg-[#DDCDC1] text-gray-800 px-6 py-3 rounded-full manrope-medium hover:bg-amber-300 transition-colors flex items-center gap-2">
                            Book consultation
                            <div className="w-6 h-6 bg-gray-800 rounded-full flex items-center justify-center">
                                <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                                </svg>
                            </div>
                        </button>
                    </Link>
                </div>

                {/* Carousel Section */}
                <div className="relative mt-20 mx-auto">
                    {/* Navigation Controls */}
                    <div className="absolute left-0 top-[250px] transform -translate-y-1/2 z-10">
                        <button 
                            onClick={prevSlide}
                            className="w-12 h-12 bg-white shadow-lg rounded-full flex items-center justify-center hover:bg-gray-50 transition-colors -ml-15 "
                        >
                            <svg className="w-6 h-6 text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                            </svg>
                        </button>
                    </div>

                    <div className="absolute right-0 top-[250px] transform -translate-y-1/2 z-10 ">
                        <button 
                            onClick={nextSlide}
                            className="w-12 h-12 bg-white shadow-lg rounded-full flex items-center justify-center hover:bg-gray-50 transition-colors -mr-10"
                        >
                            <svg className="w-6 h-6 text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                            </svg>
                        </button>
                    </div>

                    {/* Service Cards */}
                    <div className="overflow-hidden w-[1090px] ml-25">
                        <div 
                            className="flex gap-6 transition-transform duration-500 ease-in-out"
                            style={{ 
                                transform: `translateX(-${currentSlide * 1000}px)`,
                                width: `${Math.ceil(serviceCards.length / 3) * 1000}px`
                            }}
                        >
                            {serviceCards.map((service, index) => (
                                <div key={index} className="flex-shrink-0 w-85">
                                    <div className={`bg-white rounded-3xl overflow-hidden hover:shadow-xl transition-shadow duration-300  ${service.borderColor} h-[490px] flex flex-col`}>
                                        {/* Image Section */}
                                        <div className="relative h-full flex-shrink-0">
                                            <Image
                                                src={service.image}
                                                alt={service.title}
                                                fill
                                                className="object-cover"
                                            />
                                        </div>
                                        
                                        {/* Content Section */}

                                    </div>
                                    <div className="p-8 flex-1 flex flex-col">
                                            <h3 className="text-2xl font-bold text-gray-800 mb-4 manrope-semibold text-center">{service.title}</h3>
                                            <p className="text-gray-600 mb-6 leading-relaxed text-center w-[300px] manrope-medium">{service.description}</p>
                                            
                                            {/* Request Service Button */}
                                            <Link href={service.link}>
                                                <button className="w-full bg-transparent border-2 border-gray-300 text-gray-700 px-6 py-3 rounded-full manrope-medium hover:bg-gray-50 transition-colors mt-auto mx-auto">
                                                    Request service
                                                </button>
                                            </Link>
                                        </div>
                                </div>
                            ))}
                        </div>
                    </div>

                    {/* Bottom Section with Slider */}
                    <div className="flex justify-between items-center mt-8">
                        {/* Progress Slider */}
                        <div className="flex items-center gap-4 mt-3">
                            <div className="w-250 h-1 bg-gray-300 rounded-full relative">
                                <div 
                                    className="h-1 bg-gray-600 rounded-full transition-all duration-300"
                                    style={{ 
                                        width: `${((currentSlide + 1) / Math.max(1, Math.ceil(serviceCards.length / 3))) * 100}%` 
                                    }}
                                />
                                <input
                                    type="range"
                                    min="0"
                                    max={Math.max(0, Math.ceil(serviceCards.length / 3) - 1)}
                                    value={currentSlide}
                                    onChange={(e) => setCurrentSlide(parseInt(e.target.value))}
                                    className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                                />
                            </div>
                        </div>
                        <Link href="/Inspiration">
                        <button className="bg-[#ddcdc1] text-gray-800 px-6 py-3 rounded-full font-medium hover:bg-amber-300 transition-colors">
                            View Services
                        </button>
                    </Link>
                    </div>
                </div>
            </div>
        </div>
        {/* 1280 version */}

        <div className="desktop-1280 hidden md:block bg-[#F1F2F6] h-[1100px] pt-8 pb-20 px-8">
            <div className="max-w-7xl mx-auto">
                {/* Header Section */}
                <div className="flex flex-row justify-between items-center mb-12">
                    <h1 className="text-4xl wulkan-display-bold text-gray-800">All Interior Service, One Destination</h1>
                    <Link href="/ContactUs">
                        <button className="bg-[#DDCDC1] text-gray-800 px-6 py-3 rounded-full manrope-medium hover:bg-amber-300 transition-colors flex items-center gap-2">
                            Book consultation
                            <div className="w-6 h-6 bg-gray-800 rounded-full flex items-center justify-center">
                                <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                                </svg>
                            </div>
                        </button>
                    </Link>
                </div>

                {/* Carousel Section */}
                <div className="relative mt-16 mx-auto">
                    {/* Navigation Controls */}
                    <div className="absolute left-0 top-[250px] transform -translate-y-1/2 z-10">
                        <button 
                            onClick={prevSlide}
                            className="w-12 h-12 bg-white shadow-lg rounded-full flex items-center justify-center hover:bg-gray-50 transition-colors"
                        >
                            <svg className="w-6 h-6 text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                            </svg>
                        </button>
                    </div>

                    <div className="absolute right-0 top-[260px] transform -translate-y-1/2 z-10">
                        <button 
                            onClick={nextSlide}
                            className="w-12 h-12 bg-white shadow-lg rounded-full flex items-center justify-center hover:bg-gray-50 transition-colors "
                        >
                            <svg className="w-6 h-6 text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                            </svg>
                        </button>
                    </div>

                    {/* Service Cards */}
                    <div className="overflow-hidden w-[1090px] ml-16">
                        <div 
                            className="flex gap-6 transition-transform duration-500 ease-in-out"
                            style={{ 
                                transform: `translateX(-${currentSlide * 1000}px)`,
                                width: `${Math.ceil(serviceCards.length / 3) * 1000}px`
                            }}
                        >
                            {serviceCards.map((service, index) => (
                                <div key={index} className="flex-shrink-0 w-85">
                                    <div className={`bg-white rounded-3xl overflow-hidden hover:shadow-xl transition-shadow duration-300  ${service.borderColor} h-[490px] flex flex-col`}>
                                        {/* Image Section */}
                                        <div className="relative h-full flex-shrink-0">
                                            <Image
                                                src={service.image}
                                                alt={service.title}
                                                fill
                                                className="object-cover"
                                            />
                                        </div>
                                        
                                        {/* Content Section */}

                                    </div>
                                    <div className="p-8 flex-1 flex flex-col">
                                            <h3 className="text-2xl font-bold text-gray-800 mb-4 manrope-semibold text-center">{service.title}</h3>
                                            <p className="text-gray-600 mb-6 leading-relaxed text-center w-[300px] manrope-medium">{service.description}</p>
                                            
                                            {/* Request Service Button */}
                                            <Link href={service.link}>
                                                <button className="w-full bg-transparent border-2 border-gray-300 text-gray-700 px-6 py-3 rounded-full manrope-medium hover:bg-gray-50 transition-colors mt-auto mx-auto">
                                                    Request service
                                                </button>
                                            </Link>
                                        </div>
                                </div>
                            ))}
                        </div>
                    </div>

                    {/* Bottom Section with Slider */}
                    <div className="flex justify-between items-center mt-8">
                        {/* Progress Slider */}
                        <div className="flex items-center gap-4 mt-3">
                            <div className="w-250 h-1 bg-gray-300 rounded-full relative">
                                <div 
                                    className="h-1 bg-gray-600 rounded-full transition-all duration-300"
                                    style={{ 
                                        width: `${((currentSlide + 1) / Math.max(1, Math.ceil(serviceCards.length / 3))) * 100}%` 
                                    }}
                                />
                                <input
                                    type="range"
                                    min="0"
                                    max={Math.max(0, Math.ceil(serviceCards.length / 3) - 1)}
                                    value={currentSlide}
                                    onChange={(e) => setCurrentSlide(parseInt(e.target.value))}
                                    className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                                />
                            </div>
                        </div>
                        <Link href="/Inspiration">
                        <button className="bg-[#ddcdc1] text-gray-800 px-6 py-3 rounded-full font-medium hover:bg-amber-300 transition-colors">
                            View Services
                        </button>
                    </Link>
                    </div>
                </div>
            </div>
        </div>

        {/* Mobile Overlapping Carousel */}
        <div className="block md:hidden">
            <div className="w-auto  bg-[#F1F2F6] text-left text-2xl sm:text-3xl wulkan-display-bold pt-8 pb-4 pl-5">
                All Interior Service, One Destination
            </div>
            
            {/* Overlapping Cards Container */}
            <div 
                ref={carouselRef}
                className="relative h-[560px] flex justify-center items-center"
                onTouchStart={handleTouchStart}
                onTouchMove={handleTouchMove}
                onTouchEnd={handleTouchEnd}
            >
                {/* Cards Stack - Always show 3 cards overlapping */}
                {serviceCards.map((service, index) => {
                    // Calculate position relative to current slide with looping
                    let position = index - currentSlide;
                    
                    // Handle looping positions
                    if (position > serviceCards.length / 2) {
                        position -= serviceCards.length;
                    } else if (position < -serviceCards.length / 2) {
                        position += serviceCards.length;
                    }
                    
                    let zIndex = 0;
                    let transform = '';
                    let opacity = 1;
                    let scale = 1;
                    let showCard = false;
                    
                    if (position === 0) {
                        // Current card (center, fully visible)
                        zIndex = 30;
                        transform = 'translateX(40px) translateY(10px)';
                        scale = 1.05;
                        opacity = 1;
                        showCard = true;
                    } else if (position === -1) {
                        // Previous card (left, partially visible)
                        zIndex = 20;
                        transform = 'translateX(-30px) translateY(20px)';
                        scale = 0.95;
                        opacity = 0.9;
                        showCard = true;
                    } else if (position === -2) {
                        // Card before previous (further left, least visible)
                        zIndex = 10;
                        transform = 'translateX(-80px) translateY(10px)';
                        scale = 0.9;
                        opacity = 0.7;
                        showCard = true;
                    } else if (position === 1) {
                        // Next card (right, behind current)
                        zIndex = 15;
                        transform = 'translateX(-80px) translateY(60px)';
                        scale = 1;
                        opacity = 0.9;
                        showCard = true;
                    } else if (position === 2) {
                        zIndex = 0;
                        transform = 'translateX(90px) translateY(-5px)';
                        scale = 0.2;
                        opacity = 0.6;
                        showCard = true;
                    }

                    if (!showCard) return null;

                    return (
                        <div
                            key={index}
                            className="absolute transition-all duration-500 ease-in-out"
                            style={{
                                zIndex,
                                transform: `${transform} scale(${scale})`,
                                opacity
                            }}
                        >
                            <Link href={service.link} className="block">
                                <div className="w-[240px] h-[400px] rounded-3xl overflow-hidden shadow-xl">
                                    {/* Background Image */}
                                    <Image
                                        src={service.image}
                                        alt={service.title}
                                        width={240}
                                        height={400}
                                        className="w-full h-full object-cover"
                                    />
                                    
                                    {/* Text Overlay */}
                                    <div className="absolute bottom-0 left-0 right-0 p-4">
                                        <div className="bg-white rounded-2xl p-4 shadow-lg">
                                            <h3 className="text-lg font-bold text-gray-800 mb-2 wulkan-display-bold">
                                                {service.title}
                                            </h3>
                                            <p className="text-sm text-gray-600 manrope-medium leading-relaxed">
                                               {service.description}
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </Link>
                        </div>
                    );
                })}
            </div>

            {/* Swipe Indicators */}
            <div className="flex justify-center mt-6 gap-2">
                {serviceCards.map((_, index) => (
                    <button
                        key={index}
                        onClick={() => setCurrentSlide(index)}
                        className={`w-2 h-2 rounded-full transition-all duration-300 ${
                            index === currentSlide 
                                ? 'bg-gray-800 w-8' 
                                : 'bg-gray-400'
                        }`}
                    />
                ))}
            </div>
        </div>
    </div>
    )
}